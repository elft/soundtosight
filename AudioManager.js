class AudioManager{constructor(t=null,e={}){this.config={stereoMode:e.stereoMode??!0,...e},this.audioContext=null,this.sourceNode=null,this.splitter=null,this.merger=null,this.analyserLeft=null,this.analyserRight=null,this.leftData=null,this.rightData=null,this.monoData=null,this.previousFrequencyData=null,this.onAudioDataCallback=t,this.audioElement=null,this.mediaStream=null,this.mediaStreamSource=null,this.objectUrl=null,this.isMicActive=!1,this.analysisRunning=!1,this.isContextInitialized=!1,this.isPlaying=!1,this.featureHistory=new Map,this.fluxHistory=[],this.fluxTimes=[],this.beatTimestamps=[],this.bassHistory=[],this.tempoHistory=[],this.smoothedTempo=null,this._loop=this._loop.bind(this)}setStereoMode(t){this.config.stereoMode=t}async init(t=512){if(!this.isContextInitialized){if(this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.highPassFilter=this.audioContext.createBiquadFilter(),this.highPassFilter.type="highpass",this.highPassFilter.frequency.value=20,this.highPassFilter.Q.value=.707,this.config.stereoMode){this.splitter=this.audioContext.createChannelSplitter(2),this.merger=this.audioContext.createChannelMerger(2),this.analyserLeft=this.audioContext.createAnalyser(),this.analyserRight=this.audioContext.createAnalyser(),this.analyserLeft.fftSize=t,this.analyserRight.fftSize=t;const e=this.analyserLeft.frequencyBinCount;this.leftData=new Uint8Array(e),this.rightData=new Uint8Array(e),this.monoData=new Uint8Array(e),this.leftTimeDomain=new Uint8Array(t),this.rightTimeDomain=new Uint8Array(t)}else{this.analyserLeft=this.audioContext.createAnalyser(),this.analyserLeft.fftSize=t;const e=this.analyserLeft.frequencyBinCount;this.monoData=new Uint8Array(e),this.leftData=this.monoData,this.rightData=this.monoData,this.leftTimeDomain=new Uint8Array(t),this.rightTimeDomain=this.leftTimeDomain}this.previousFrequencyData=new Uint8Array(this.leftData.length),this.isContextInitialized=!0,this._aWeightCurve=this.computeAWeightingCurve(this.audioContext.sampleRate,t)}}connectSource(t,e={}){if(!this.isContextInitialized)throw new Error("AudioManager not initialized");const{monitorPlayback:i=!0}=e;if(this.sourceNode=t,this.sourceNode.connect(this.highPassFilter),this.config.stereoMode?(this.highPassFilter.connect(this.splitter),this.splitter.connect(this.analyserLeft,0),this.splitter.connect(this.analyserRight,1)):this.highPassFilter.connect(this.analyserLeft),i)try{this.sourceNode.connect(this.audioContext.destination)}catch(t){}}async play(){if(this.isContextInitialized||await this.init(),this.audioContext&&"suspended"===this.audioContext.state)try{await this.audioContext.resume()}catch(t){}if(this.audioElement)try{await this.audioElement.play(),this.startAnalysis()}catch(t){throw this.isPlaying=!1,this._emitPlayStateChange(),t}}pause(){this.audioElement&&this.isPlaying&&(this.audioElement.pause(),this.isPlaying=!1,this._emitPlayStateChange())}stop(t={}){const{unload:e=!1}=t;if(this.audioElement){try{this.audioElement.pause()}catch(t){}try{this.audioElement.currentTime=0}catch(t){}}e&&this._releaseLoadedAudio(),this.isPlaying=!1,this.isMicActive=!1,this._emitPlayStateChange()}_releaseLoadedAudio(){if(this.audioElement){const t=this.audioElement;try{t.pause()}catch(t){}try{t.removeAttribute("src")}catch(t){}try{t.load?.()}catch(t){}try{t.remove()}catch(t){}this.audioElement=null}if(this.sourceNode){try{this.sourceNode.disconnect()}catch(t){}this.sourceNode=null}if(this.objectUrl){try{URL.revokeObjectURL(this.objectUrl)}catch(t){}this.objectUrl=null}}setAudioDataCallback(t){"function"==typeof t&&(this.audioDataCallback=t)}setPlayStateChangeCallback(t){"function"==typeof t&&(this.playStateChangeCallback=t)}_emitAudioData(t){this.audioDataCallback&&this.audioDataCallback(t)}_emitPlayStateChange(){this.playStateChangeCallback&&this.playStateChangeCallback(this.isPlaying,this.isMicActive)}_loop(){if(!this.isPlaying&&!this.isMicActive&&!this.audioElement)return void(this.analysisRunning=!1);const t=this.getAudioData();this._emitAudioData(t),requestAnimationFrame(this._loop)}getAudioData(){if(!this.isContextInitialized||!this.analyserLeft)return this._getEmptyAudioData();if(this.config.stereoMode){this.analyserLeft.getByteFrequencyData(this.leftData),this.analyserRight.getByteFrequencyData(this.rightData),this.analyserLeft.getByteTimeDomainData(this.leftTimeDomain),this.analyserRight.getByteTimeDomainData(this.rightTimeDomain);const t=this.leftData.length,e=new Uint8Array(t);for(let i=0;i<t;i++)e[i]=this.leftData[i]+this.rightData[i]>>1;this.monoData.set(e)}else this.analyserLeft.getByteFrequencyData(this.monoData),this.analyserLeft.getByteTimeDomainData(this.leftTimeDomain);const t=this.computeAudioFeatures(this.monoData,this.previousFrequencyData);let e,i,s;this.previousFrequencyData.set(this.monoData),this.config.stereoMode?(e=this.computeRMS(this.leftData),i=this.computeRMS(this.rightData),s=(i-e)/(e+i+1e-6)):(e=t.rms,i=t.rms);const a=this.estimateTempo(),n=this.predictNextBeat(a),r=t.rms,h=t.subBassEnergy,o=t.bassEnergy,l=t.lowMidEnergy,c=t.midEnergy,u=t.upperMidEnergy,m=t.presenceEnergy,d=t.trebleEnergy,y=t.brillianceEnergy,g=t.ultrassonicEnergy,p=t.centroid,f=t.flatness,b=t.bandCountActive,C=t.spectralFlux,D=s,E=(h+o+l+c+u+m+d+y+g)/9,x=(h+o+l+c+u+m+d+y+g)/9,M=x-(this.featureHistory.get("overallEnergy")||0),S=Math.abs(M);let A,T,v;return this.config.stereoMode?(A=this.applyAWeightingToSpectrum(this.leftData,this._aWeightCurve),T=this.applyAWeightingToSpectrum(this.rightData,this._aWeightCurve),v=this.applyAWeightingToSpectrum(this.monoData,this._aWeightCurve)):(v=this.applyAWeightingToSpectrum(this.monoData,this._aWeightCurve),A=v,T=v),this.featureHistory.set("overallEnergy",x),{rms:r,energy:E,centroid:p,flatness:f,spectralFlux:C,subBassEnergy:h,bassEnergy:o,lowMidEnergy:l,midEnergy:c,upperMidEnergy:u,presenceEnergy:m,trebleEnergy:d,brillianceEnergy:y,ultrassonicEnergy:g,bandCountActive:Math.round(b),overallEnergy:x,energyChange:M,energyChangeIntensity:S,dominantBand:Math.max(h,o,l,c,u,m,d,y,g),isBeatSpike:t.isBeat&&S>.05,stereoSpread:Math.abs(s),bassDropIntensity:t.bassDrop?S:0,spectralCentroidNormalized:p/(this.audioContext.sampleRate/2),spectralFlatnessSmoothed:f,activeBandRatio:b/this.monoData.length,rmsDifference:i-e,isMassiveEnergyChange:S>.1,isBeat:t.isBeat,bassDrop:t.bassDrop,tempo:Math.round(a||0),time:this.audioContext.currentTime,predictedNextBeat:n,beatPhase:this.computeBeatPhase(a,n),stereoBalance:D,rmsLeft:e,rmsRight:i,aWeighted:{left:A,right:T,mono:v},dominantFreq:t.dominantFreq,frequencyLeft:this.leftData,frequencyRight:this.rightData,timeDomainLeft:this.leftTimeDomain,timeDomainRight:this.rightTimeDomain}}_getEmptyAudioData(){return{rms:0,energy:0,centroid:0,flatness:0,spectralFlux:0,subBassEnergy:0,bassEnergy:0,lowMidEnergy:0,midEnergy:0,upperMidEnergy:0,presenceEnergy:0,trebleEnergy:0,brillianceEnergy:0,ultrassonicEnergy:0,bandCountActive:0,overallEnergy:0,energyChange:0,energyChangeIntensity:0,dominantBand:0,isBeatSpike:!1,stereoSpread:0,bassDropIntensity:0,spectralCentroidNormalized:0,spectralFlatnessSmoothed:0,activeBandRatio:0,rmsDifference:0,isMassiveEnergyChange:!1,isBeat:!1,bassDrop:!1,tempo:0,predictedNextBeat:null,beatPhase:0,stereoBalance:0,rmsLeft:0,rmsRight:0,dominantFreq:0,time:0,aWeighted:{left:{rms:0,db:0,normalized:0},right:{rms:0,db:0,normalized:0},mono:{rms:0,db:0,normalized:0}},frequencyLeft:new Uint8Array(0),frequencyRight:new Uint8Array(0),timeDomainLeft:new Uint8Array(0),timeDomainRight:new Uint8Array(0)}}computeAudioFeatures(t,e){const i=t.length,s=this.audioContext.sampleRate/2,a=Math.max(0,Math.floor(20/s*i));let n=0,r=0,h=0,o=0,l=0,c=0,u=0,m=0,d=0,y=0,g=0,p=0;for(let e=a;e<i;e++){const a=t[e];y+=a,a>32&&g++;const f=e/i*s;p+=f*a,f<60?n+=a:f<250?r+=a:f<500?h+=a:f<1e3?o+=a:f<2e3?l+=a:f<4e3?c+=a:f<8e3?u+=a:f<16e3?m+=a:d+=a}const f=p/(y+1e-6),b=y>0?g/(i-a):0,C=this.computeSpectralFlux(t,e,a),D=this.audioContext.currentTime;this.fluxHistory.push(C),this.fluxTimes.push(D),this.fluxHistory.length>512&&(this.fluxHistory.shift(),this.fluxTimes.shift());const E=this.detectBeatFromFlux(C,D);E&&(this.beatTimestamps.push(D),this.beatTimestamps.length>64&&this.beatTimestamps.shift());const x=n/((i-a)/128*255),M=r/((i-a)/16*255),S=h/((i-a)/64*255),A=o/((i-a)/32*255),T=l/((i-a)/32*255),v=c/((i-a)/16*255),w=u/((i-a)/16*255),F=m/((i-a)/32*255),L=d/((i-a)/64*255),P=this.detectBassDrop(M);let B=a,R=-1;for(let e=a;e<i;e++)t[e]>R&&(R=t[e],B=e);const U=B/i*s;return{rms:this.computeRMS(t,a),centroid:f,flatness:b,spectralFlux:C,subBassEnergy:x,bassEnergy:M,lowMidEnergy:S,midEnergy:A,upperMidEnergy:T,presenceEnergy:v,trebleEnergy:w,brillianceEnergy:F,ultrassonicEnergy:L,bandCountActive:g,isBeat:E,bassDrop:P,dominantFreq:U}}computeRMS(t,e=0){let i=0;const s=t.length;for(let a=e;a<s;a++){const e=t[a]/255;i+=e*e}return Math.sqrt(i/(s-e))}computeSpectralFlux(t,e,i=0){if(!e)return 0;let s=0;const a=t.length;for(let n=i;n<a;n++){const i=(t[n]-e[n])/255;i>0&&(s+=i)}return s/(a-i)}smoothFeature(t,e,i=.25){const s=this.featureHistory.get(t)??e,a=s+(e-s)*i;return this.featureHistory.set(t,a),a}detectBeatFromFlux(t,e){if(e-(this.beatTimestamps.length?this.beatTimestamps[this.beatTimestamps.length-1]:-9999)<.15)return!1;const i=this.fluxHistory;if(i.length<8)return!1;const s=i.slice(-16),a=s.reduce((t,e)=>t+e,0)/s.length,n=s.reduce((t,e)=>t+(e-a)**2,0)/s.length,r=Math.sqrt(n);return t>a+1.5*Math.max(.01,r)}detectBassDrop(t){if(this.bassHistory.push(t),this.bassHistory.length>120&&this.bassHistory.shift(),this.bassHistory.length<12)return!1;const e=this.bassHistory.reduce((t,e)=>t+e,0)/this.bassHistory.length;return t>2.2*e&&e<.1}estimateTempo(){if(this.beatTimestamps.length>=3){const t=[];for(let e=1;e<this.beatTimestamps.length;e++)t.push(this.beatTimestamps[e]-this.beatTimestamps[e-1]);t.sort((t,e)=>t-e);const e=60/t[Math.floor(t.length/2)];this.tempoHistory.push(e),this.tempoHistory.length>8&&this.tempoHistory.shift();const i=this.tempoHistory.reduce((t,e)=>t+e,0)/this.tempoHistory.length;return this.smoothedTempo=i,this.smoothedTempo}if(this.fluxHistory.length>=64&&this.fluxTimes.length>=64){const t=this.fluxTimes;let e=0;for(let i=1;i<t.length;i++)e+=t[i]-t[i-1];const i=e/(t.length-1),s=this.fluxHistory.slice(-256),a=40,n=240,r=Math.floor(60/n/i),h=Math.ceil(60/a/i),o=new Float32Array(h-r+1);for(let t=r;t<=h;t++){let e=0;for(let i=0;i<s.length-t;i++)e+=(s[i]-0)*(s[i+t]-0);o[t-r]=e}let l=0,c=-1/0;for(let t=0;t<o.length;t++)o[t]>c&&(c=o[t],l=t);const u=(r+l)*i;if(u>0&&isFinite(u)){const t=60/u;this.tempoHistory.push(t),this.tempoHistory.length>8&&this.tempoHistory.shift();const e=this.tempoHistory.reduce((t,e)=>t+e,0)/this.tempoHistory.length;return this.smoothedTempo=e,this.smoothedTempo}}return this.smoothedTempo||120}predictNextBeat(t){const e=this.audioContext.currentTime;if(!t||t<=0)return null;if(this.beatTimestamps.length>=2){const t=[];for(let e=1;e<this.beatTimestamps.length;e++)t.push(this.beatTimestamps[e]-this.beatTimestamps[e-1]);t.sort((t,e)=>t-e);const i=t[Math.floor(t.length/2)];let s=this.beatTimestamps[this.beatTimestamps.length-1]+i;for(;s<=e;)s+=i;return s}if(this.fluxTimes.length){this.fluxTimes.length>=2&&(this.fluxTimes[this.fluxTimes.length-1],this.fluxTimes[0],this.fluxTimes.length);const i=60/t;return e+(i-(e-this.fluxTimes[this.fluxTimes.length-1])%i)}return e+60/t}computeBeatPhase(t,e){if(!t||!e)return 0;const i=60/t;let s=1-(e-this.audioContext.currentTime)/i;return s=Math.max(0,Math.min(1,s)),s}aWeighting_dB(t){const e=t*t,i=Math.pow(12194.217,2)*Math.pow(t,4)/((e+Math.pow(20.598997,2))*(e+Math.pow(12194.217,2))*Math.sqrt((e+Math.pow(107.65265,2))*(e+Math.pow(737.86223,2))));return 20*Math.log10(i)+2}computeAWeightingCurve(t,e){const i=e/2,s=t/2,a=new Float32Array(i);for(let t=0;t<i;t++){const e=t/i*s,n=Math.max(1e-6,e);a[t]=this.aWeighting_dB(n)}return a}applyAWeightingToSpectrum(t,e){const i=Math.min(t.length,e.length);let s=0,a=0;for(let n=0;n<i;n++){const i=t[n]/255*Math.pow(10,e[n]/20);s+=i*i,a+=i}const n=Math.sqrt(s/i);return{rms:n,db:n>0?20*Math.log10(n):-1/0,normalized:Math.min(1,a/i)}}startAnalysis(){this.analysisRunning||(this.analysisRunning=!0,requestAnimationFrame(this._loop))}stopAnalysis(){this.analysisRunning=!1}async loadFile(t){if(!t)throw new Error("No file provided");if(this.isContextInitialized||await this.init(),this.objectUrl&&(URL.revokeObjectURL(this.objectUrl),this.objectUrl=null),this.audioElement){try{this.audioElement.pause()}catch(t){}this.audioElement.src="",this.audioElement.remove(),this.audioElement=null}const e=URL.createObjectURL(t);this.objectUrl=e;const i=document.createElement("audio");i.controls=!1,i.preload="auto",i.src=e,i.crossOrigin="anonymous";try{const t=this.audioContext.createMediaElementSource(i);this.connectSource(t)}catch(t){}return i.addEventListener("play",async()=>{if(this.audioContext&&"suspended"===this.audioContext.state)try{await this.audioContext.resume()}catch(t){}this.isPlaying=!0,this._emitPlayStateChange(),this.startAnalysis()}),i.addEventListener("pause",()=>{this.isPlaying=!1,this._emitPlayStateChange()}),i.addEventListener("ended",()=>{this.isPlaying=!1,this._emitPlayStateChange()}),this.audioElement=i,new Promise((t,e)=>{const s=()=>{n(),t()},a=t=>{n(),e(new Error("Audio failed to load"))},n=()=>{i.removeEventListener("canplay",s),i.removeEventListener("error",a)};i.addEventListener("canplay",s),i.addEventListener("error",a);try{i.load()}catch(t){}})}async startMicrophone(){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new Error("getUserMedia not available");this.isContextInitialized||await this.init(),"suspended"===this.audioContext.state&&await this.audioContext.resume();const t=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=t;const e=this.audioContext.createMediaStreamSource(t);this.mediaStreamSource=e,this.connectSource(e,{monitorPlayback:!1}),this.isMicActive=!0,this._emitPlayStateChange(),this.startAnalysis()}stopMicrophone(){if(this.mediaStream&&(this.mediaStream.getTracks().forEach(t=>t.stop()),this.mediaStream=null),this.mediaStreamSource){try{this.mediaStreamSource.disconnect()}catch(t){}this.mediaStreamSource=null}this.isMicActive=!1,this._emitPlayStateChange()}onAudioData(t){this.setAudioDataCallback(t)}onPlayStateChange(t){this.setPlayStateChangeCallback(t)}destroy(){if(this.cleanup(),this.audioContext){try{this.audioContext.close()}catch(t){}this.audioContext=null}}cleanup(){if(this.analysisRunning=!1,this.audioElement){try{this.audioElement.pause()}catch(t){}try{this.audioElement.removeAttribute("src")}catch(t){}try{const t=this.audioElement.parentNode,e=this.audioElement.cloneNode(!1);t&&t.replaceChild(e,this.audioElement)}catch(t){}this.audioElement=null}if(this.objectUrl){try{URL.revokeObjectURL(this.objectUrl)}catch(t){}this.objectUrl=null}if(this.mediaStream){try{this.mediaStream.getTracks().forEach(t=>t.stop())}catch(t){}this.mediaStream=null}if(this.mediaStreamSource){try{this.mediaStreamSource.disconnect()}catch(t){}this.mediaStreamSource=null}if(this.sourceNode){try{this.sourceNode.disconnect()}catch(t){}this.sourceNode=null}if(this.highPassFilter){try{this.highPassFilter.disconnect()}catch(t){}this.highPassFilter=null}if(this.splitter){try{this.splitter.disconnect()}catch(t){}this.splitter=null}if(this.merger){try{this.merger.disconnect()}catch(t){}this.merger=null}if(this.analyserLeft){try{this.analyserLeft.disconnect()}catch(t){}this.analyserLeft=null}if(this.analyserRight){try{this.analyserRight.disconnect()}catch(t){}this.analyserRight=null}this.leftData=null,this.rightData=null,this.previousFrequencyData=null,this.isMicActive=!1,this.isPlaying=!1,this.isContextInitialized=!1,this.featureHistory.clear?.(),this.fluxHistory.length=0,this.fluxTimes.length=0,this.beatTimestamps.length=0,this.bassHistory.length=0,this.tempoHistory.length=0}}window.AudioManager=AudioManager;