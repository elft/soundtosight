class AetherPrismOrbVisualizer extends BaseVisualizer{static meta={description:"Glassine orb with aurora halos and constellations that breathe with harmonic energy.",tags:["ambient","ethereal","chill","space"]};constructor(t,e={}){super(t,{backgroundColor:"#050505",force2d:!0,smoothing:.25,stereoMode:!0,sensitivity:1,debug:!1,...e}),this.t=0,this.maxParticles=420,this.particles=new Array(this.maxParticles).fill(0).map((t,e)=>({phi:Math.acos(2*Math.random()-1),theta:Math.random()*Math.PI*2,x:0,y:0,z:0})),this.baseRadius=.22*Math.min(this.width,this.height),this.currentRadius=this.baseRadius,this.freqL=new Float32Array(0),this.freqR=new Float32Array(0),this.waveL=new Float32Array(0),this.waveR=new Float32Array(0),this.stereo=0,this.gravity=0,this.constellationStrength=0,this.spineRings=[{tiltX:.3,tiltY:.1,radiusScale:.65},{tiltX:-.4,tiltY:.25,radiusScale:.85},{tiltX:.9,tiltY:-.2,radiusScale:1.05}],this.filamentFlash=0,this.energySmooth=0,this.midSmooth=0,this.presenceSmooth=0}onResize(){this.baseRadius=.22*Math.min(this.width,this.height)}onUpdate(t){const e=Number.isFinite(t.energy)?t.energy:0;this.energySmooth=this.lerp(this.energySmooth,e,.1),this.t+=.004+.02*this.energySmooth,this.freqL=this._smoothInto(this.freqL,t.frequencyLeft,.2,t=>t/255),this.freqR=this._smoothInto(this.freqR,t.frequencyRight,.2,t=>t/255),this.waveL=this._smoothInto(this.waveL,t.timeDomainLeft,.18,t=>(t-128)/128),this.waveR=this._smoothInto(this.waveR,t.timeDomainRight,.18,t=>(t-128)/128),this.stereo=this.lerp(this.stereo,Number.isFinite(t.stereoBalance)?t.stereoBalance:0,.12),t.bassDrop&&(this.gravity=1),this.gravity*=.92,this.gravity=Math.max(0,this.gravity),this.constellationStrength+=8e-4*(t.brillianceEnergy||0),this.constellationStrength*=.96;const i=[{key:"subBassEnergy",hue:250},{key:"bassEnergy",hue:210},{key:"lowMidEnergy",hue:180},{key:"midEnergy",hue:130},{key:"upperMidEnergy",hue:80},{key:"presenceEnergy",hue:45},{key:"trebleEnergy",hue:18},{key:"brillianceEnergy",hue:300}].reduce((e,i)=>t[i.key]>t[e.key]?i:e);this.hue=i.hue,this.currentRadius+=.08*(this.baseRadius+this.energySmooth*this.baseRadius*.6-this.currentRadius);const s=Number.isFinite(t.midEnergy)?t.midEnergy:0,h=Number.isFinite(t.presenceEnergy)?t.presenceEnergy:0;this.midSmooth=this.lerp(this.midSmooth,s,.12),this.presenceSmooth=this.lerp(this.presenceSmooth,h,.12),this.spineRotation=(this.spineRotation??0)+.004*this.midSmooth+.002*this.presenceSmooth,(t.isBeat||t.isBeatSpike||t.bassDrop||t.spectralFlux>.04)&&(this.filamentFlash=1),this.filamentFlash*=.88}onRender(){const t=this.ctx,e=.5*this.width,i=.5*this.height;t.fillStyle="rgba(0,0,0,0.18)",t.fillRect(0,0,this.width,this.height);const s=.7*this.t,h=.4*this.t,a=Math.sin(s),n=Math.cos(s),r=Math.sin(h),o=Math.cos(h);t.lineWidth=1.6;for(let s of this.spineRings){const h=this.currentRadius*s.radiusScale*(1-.35*this.gravity);let l=this.spineRotation+s.tiltX,c=.7*this.spineRotation+s.tiltY;const g=Math.sin(l),m=Math.cos(l),y=Math.sin(c),p=Math.cos(c),u=72;t.beginPath();for(let s=0;s<=u;s++){const l=s/u*Math.PI*2;let c=h*Math.cos(l),d=h*Math.sin(l),f=0,b=c*p-f*y,R=c*y+f*p,M=d*m-R*g;R=d*g+R*m;let w=b*r+R*o,v=M*n-w*a;w=M*a+w*n;const S=1/(1+.0025*w),k=e+(b*o-R*r)*S,F=i+v*S;0===s?t.moveTo(k,F):t.lineTo(k,F)}t.strokeStyle=`hsla(${this.hue}, 90%, 65%, 0.38)`,t.stroke()}const l=this.particles.length,c=[];for(let t=0;t<l;t++){const s=this.particles[t],h=this.currentRadius*(1-.45*this.gravity);let l=h*Math.sin(s.phi)*Math.cos(s.theta),g=h*Math.sin(s.phi)*Math.sin(s.theta),m=h*Math.cos(s.phi);const y=this.freqL.length?this.freqL[t%this.freqL.length]:0,p=this.freqR.length?this.freqR[t%this.freqR.length]:0,u=this.waveL.length?this.waveL[t%this.waveL.length]:0,d=this.waveR.length?this.waveR[t%this.waveR.length]:0,f=.5*(y+p),b=Math.abs(.5*(u+d)),R=1+.45*f+.3*b;l*=R,g*=R,m*=R;let M=l*r+m*o,w=g*n-M*a;M=g*a+M*n;const v=1/(1+.0025*M),S=e+(l*o-m*r)*v,k=i+w*v,F=50+50*f+40*b,q=Math.max(1.2,3.4*v+3*f);c.push({px:S,py:k,hue:this.hue,brightness:F,size:q,perspective:v})}if(c.sort((t,e)=>t.perspective-e.perspective),this.filamentFlash>.01){t.lineWidth=1.4;const e=125,i=Math.floor(.18*l*this.filamentFlash);t.globalAlpha=this.filamentFlash;for(let s=0;s<i;s++){const i=c[7*s%l],h=c[(11*s+Math.floor(9*this.t))%l];t.strokeStyle=`hsla(${e}, 100%, 62%, 0.55)`,t.beginPath(),t.moveTo(i.px,i.py),t.lineTo(h.px,h.py),t.stroke()}t.globalAlpha=1}t.globalAlpha=1;for(let e of c)t.fillStyle=`hsla(${e.hue}, 90%, ${e.brightness}%, ${.7*e.perspective})`,t.beginPath(),t.arc(e.px,e.py,e.size,0,2*Math.PI),t.fill()}_smoothInto(t,e,i=.2,s=t=>t){if(!e||!e.length){if(t&&t.length){const e=1-i;for(let i=0;i<t.length;i++)t[i]*=e}return t}t&&t.length===e.length||(t=new Float32Array(e.length));const h=1-i;for(let a=0;a<e.length;a++){const n=s(e[a]||0);t[a]=t[a]*h+n*i}return t}}"undefined"!=typeof window&&(window.AetherPrismOrbVisualizer=AetherPrismOrbVisualizer);