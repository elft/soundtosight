class NeuralConstellationVisualizer extends BaseVisualizer{static meta={description:"Neural lattice of glowing axons, synapse pulses, and traversal couriers.",tags:["experimental","idm","ambient","future"]};constructor(t=null,e={}){super(t,{backgroundColor:"#04030a",force2d:!0,...e})}async init(){this.centerX=this.width/2,this.centerY=this.height/2,this.brainBounds={width:Math.min(.68*this.width,.88*this.height),height:Math.min(.78*this.height,.9*this.width)},this.networkSeed=1,this.neurons=[],this.axons=[],this.ripples=[],this.synapsePulses=[],this.flowPhase=0,this.beatPulse=0,this.globalGlow=0,this.pulseSeed=100,this.pulseAccumulator=0,this.frameCount=0,this.smoothedSubBass=0,this.smoothedBass=0,this.smoothedBassUpper=0,this.smoothedLowMid=0,this.smoothedMid=0,this.smoothedUpperMid=0,this.smoothedPresence=0,this.smoothedTreble=0,this.smoothedBrilliance=0,this.smoothedFlux=0,this.smoothedEnergy=0,this.smoothedStereo=0,this.smoothedCentroid=0,this.depthSpan=.55*Math.min(this.brainBounds.width,this.brainBounds.height),this.perspective=1.1*Math.max(this.width,this.height),this.depthOffset=.45*this.perspective,this.camera={yaw:0,pitch:0,roll:0,targetYaw:0,targetPitch:0,targetRoll:0},this.brainPlaneScaleX=1,this.brainPlaneScaleY=1,this.brainPlaneRotation=0,this.neuronRenderOrder=[],this.axonRenderOrder=[],this.traversalPath=[],this.greenCourier={segmentIndex:0,t:0,screenX:this.centerX,screenY:this.centerY,depth:this.depthOffset,scale:1,lastMetric:0,maxTrail:160},this.greenTrail=[],this.isCompactScreen=!1,this.neuronScaleFactor=1,this.neuronGlowFactor=1,this.traversalGlowFactor=1,this.glowScaleFactor=1,this.rippleScaleFactor=1,this.axonScaleFactor=1,this.trailScaleFactor=1,this.trailDensityFactor=1,this.trailSpeedFactor=1,this.courierScaleFactor=1,this.updateScaleFactors(),this.brainOverlay=this.createOverlay("neural-constellation-overlay",-2),this.drawBrainOverlay(),this.generateNeuralField(),this.computeTraversalPath(),this.updateNeuronWorldPositions(),this.constructAxonNetwork()}onResize(){this.centerX=this.width/2,this.centerY=this.height/2,this.brainBounds||(this.brainBounds={width:1,height:1}),this.brainBounds.width=Math.min(.68*this.width,.88*this.height),this.brainBounds.height=Math.min(.78*this.height,.9*this.width),this.depthSpan=.55*Math.min(this.brainBounds.width,this.brainBounds.height),this.perspective=1.1*Math.max(this.width,this.height),this.depthOffset=.45*this.perspective,this.updateScaleFactors(),this.computeTraversalPath(),this.updateNeuronWorldPositions(),this.constructAxonNetwork(!0),this.drawBrainOverlay()}updateScaleFactors(){const t=Math.min(this.width,this.height),e=t>0?this.constrain(t/820,.45,1):1;this.isCompactScreen=t<=820;const s=this.isCompactScreen?e:1;this.neuronScaleFactor=this.isCompactScreen?this.constrain(.65*s+.35,.55,.95):1,this.neuronGlowFactor=this.isCompactScreen?this.constrain(.52*s+.18,.4,.7):1,this.traversalGlowFactor=this.isCompactScreen?this.constrain(.62*s+.28,.5,.85):1,this.glowScaleFactor=this.isCompactScreen?this.constrain(.6*s+.28,.45,.75):1,this.rippleScaleFactor=this.isCompactScreen?this.constrain(.8*s+.3,.65,1):1,this.axonScaleFactor=this.isCompactScreen?this.constrain(.78*s+.32,.65,1):1,this.trailScaleFactor=this.isCompactScreen?this.constrain(.72*s+.3,.55,1):1,this.trailDensityFactor=this.isCompactScreen?this.constrain(.74*s+.28,.55,1):1,this.trailSpeedFactor=this.isCompactScreen?this.constrain(.86*s+.28,.6,1):1,this.courierScaleFactor=this.isCompactScreen?this.constrain(.76*s+.32,.6,1):1}onUpdate(t){if(!t)return;const e=t.subBassEnergy??0,s=t.bassEnergy??0,i=t.BassEnergy??s,r=t.lowMidEnergy??0,o=t.midEnergy??0,a=t.upperMidEnergy??0,h=t.presenceEnergy??0,n=t.trebleEnergy??0,l=t.brillianceEnergy??0,c=t.energy??t.overallEnergy??0,d=t.spectralFlux??0,p=t.spectralCentroidNormalized??(t.centroid?this.map(t.centroid,0,2e4,0,1):0),u=t.stereoBalance??0;this.smoothedSubBass=this.lerp(this.smoothedSubBass,e,.12),this.smoothedBass=this.lerp(this.smoothedBass,s,.14),this.smoothedBassUpper=this.lerp(this.smoothedBassUpper,i,.18),this.smoothedLowMid=this.lerp(this.smoothedLowMid,r,.12),this.smoothedMid=this.lerp(this.smoothedMid,o,.14),this.smoothedUpperMid=this.lerp(this.smoothedUpperMid,a,.14),this.smoothedPresence=this.lerp(this.smoothedPresence,h,.16),this.smoothedTreble=this.lerp(this.smoothedTreble,n,.16),this.smoothedBrilliance=this.lerp(this.smoothedBrilliance,l,.16),this.smoothedFlux=this.lerp(this.smoothedFlux,d,.18),this.smoothedEnergy=this.lerp(this.smoothedEnergy,c,.2),this.smoothedStereo=this.lerp(this.smoothedStereo,u,.2),this.smoothedCentroid=this.lerp(this.smoothedCentroid,p,.14);const m=this.audioTriggers||{},g=m.dropStart||m.dropBloom,S=m.dropScore||0;t.isBeat&&(this.beatPulse=1,this.createRipple(.9+.4*this.smoothedBassUpper)),this.beatPulse*=.9,g&&(this.createRipple(1.2+.8*Math.max(S,this.smoothedBassUpper)),this.globalGlow=Math.min(1,this.globalGlow+.35)),this.globalGlow=this.lerp(this.globalGlow,.45*(this.smoothedSubBass+this.smoothedBass),.12),this.flowPhase+=.01+.06*this.smoothedMid,this.frameCount+=1;const x=(this.smoothedPresence+this.smoothedTreble+this.smoothedBrilliance)/3,f=(this.smoothedSubBass+this.smoothedBass+this.smoothedBassUpper)/3,b=(this.smoothedLowMid+this.smoothedMid+this.smoothedUpperMid)/3,M=this.constrain(.45*this.smoothedEnergy+.25*x+.35*this.smoothedFlux,0,1),y=this.smoothedStereo,w=this.constrain(1.25*(x-b),-.6,.6),P=(.35*this.smoothedFlux+.25*this.beatPulse)*(0===y?1:Math.sign(y));this.camera.targetYaw=.45*y,this.camera.targetPitch=w,this.camera.targetRoll=this.constrain(.18*y+P,-.45,.45);const F=.08+.12*this.smoothedEnergy;this.camera.yaw=this.lerp(this.camera.yaw,this.camera.targetYaw,F),this.camera.pitch=this.lerp(this.camera.pitch,this.camera.targetPitch,.9*F),this.camera.roll=this.lerp(this.camera.roll,this.camera.targetRoll,.85*F);const v=1.1*Math.max(this.width,this.height),B=.55*Math.min(this.brainBounds.width,this.brainBounds.height);if(this.perspective=this.lerp(this.perspective,v+140*this.globalGlow,.05),this.depthSpan=this.lerp(this.depthSpan,B*(1+.12*this.smoothedMid+.08*this.smoothedBass),.05),this.depthOffset=.45*this.perspective,this.updateNeuronWorldPositions(),!this.neurons||0===this.neurons.length)return;const C=this.constrain(.7*this.smoothedEnergy+.3*c,0,1);for(let t=0;t<this.neurons.length;t++){const e=this.neurons[t];e.traversalActivation=.88*(e.traversalActivation||0)}this.updateGreenCourier(C);for(let t=0;t<this.neurons.length;t++){const e=this.neurons[t],s=e.bandProfile,i=s.sub*this.smoothedSubBass+s.bass*this.smoothedBass+s.Bass*this.smoothedBassUpper+s.lowMid*this.smoothedLowMid+s.mid*this.smoothedMid+s.upperMid*this.smoothedUpperMid+s.presence*this.smoothedPresence+s.treble*this.smoothedTreble+s.brilliance*this.smoothedBrilliance;e.activation=this.lerp(e.activation,i,.28);const r=.7*i+.25*b+.5*(Math.sin(1.3*this.flowPhase+12.1*e.noiseSeed)+1)*.2;e.charge=this.lerp(e.charge,r,.2),e.connectionFlux=this.lerp(e.connectionFlux,.8*i+.3*this.smoothedFlux,.18);const o=Math.sin(e.noiseSeed*Math.PI*2)>=0?1:-1,a=this.isCompactScreen?.65:1,h=o*((.002+.05*M+.035*e.activation+.02*this.beatPulse)*a);if(e.rotationSpeed=this.lerp(e.rotationSpeed||0,h,.12),e.rotation=(e.rotation||0)+e.rotationSpeed,(e.rotation>2*Math.PI||e.rotation<2*-Math.PI)&&(e.rotation%=2*Math.PI),i>.55){const e=.04*(i+.5*x+.3*f);Math.random()<e&&this.triggerAxonPulses(t,i)}}if(this.pulseAccumulator+=.25*x+.18*this.smoothedFlux,this.pulseAccumulator>.6){const t=this.pulseSeed+=17;let e=Math.floor(this.randomFromSeed(t)*this.neurons.length);e<0&&(e=0),e>=this.neurons.length&&(e=this.neurons.length-1),this.triggerAxonPulses(e,.7+.6*x),this.pulseAccumulator=0}this.drawBrainOverlay()}onRender(){if(!this.ctx)return;const t=this.ctx;t.fillStyle="rgba(4, 3, 10, 0.18)",t.fillRect(0,0,this.width,this.height),this.drawBackgroundHalo(t),this.updateRipples(),this.drawRipples(t),this.drawAxons(t),this.updateSynapsePulses(),this.drawSynapsePulses(t),this.drawTraversalCourier(t),this.drawNeurons(t)}drawBackgroundHalo(t){const e=Math.max(40,this.brainBounds.width*(.58+.25*this.globalGlow)*this.glowScaleFactor),s=Math.max(40,this.brainBounds.height*(.58+.3*this.globalGlow)*this.glowScaleFactor),i=205+80*this.smoothedCentroid;t.save(),t.translate(this.centerX,this.centerY),t.rotate(this.brainPlaneRotation),t.scale(this.brainPlaneScaleX,this.brainPlaneScaleY);const r=t.createRadialGradient(0,0,Math.max(12,.25*e),0,0,Math.max(e,s)),o=(.28+.25*this.globalGlow)*(this.isCompactScreen?.75:1);r.addColorStop(0,`hsla(${i}, 80%, ${25+25*this.globalGlow}%, ${o})`),r.addColorStop(1,"rgba(0, 0, 0, 0)"),t.fillStyle=r,t.beginPath(),t.ellipse(0,0,e,s,0,0,2*Math.PI),t.fill(),t.restore()}drawAxons(t){if(!this.axons||0===this.axons.length)return;const e=(this.smoothedSubBass+this.smoothedBass+this.smoothedBassUpper)/3,s=(this.smoothedLowMid+this.smoothedMid+this.smoothedUpperMid)/3,i=(this.smoothedPresence+this.smoothedTreble+this.smoothedBrilliance)/3;this.axonRenderOrder&&this.axonRenderOrder.length===this.axons.length||(this.axonRenderOrder=Array.from({length:this.axons.length},(t,e)=>e));const r=new Array(this.axons.length);for(let t=0;t<this.axons.length;t++){const e=this.getAxonGeometry(this.axons[t]);r[t]=e?e.averageDepth:1/0}this.axonRenderOrder.sort((t,e)=>r[t]-r[e]),t.lineCap="round",t.lineJoin="round";for(let r=0;r<this.axonRenderOrder.length;r++){const o=this.axonRenderOrder[r],a=this.axons[o],h=this.getAxonGeometry(a);if(!h)continue;const n=this.neurons[a.from],l=this.neurons[a.to];if(!n||!l)continue;const c=.5*(n.connectionFlux+l.connectionFlux),d=e*a.bandProfile.low+s*a.bandProfile.mid+i*a.bandProfile.high,p=this.smoothedStereo*a.stereoInfluence,u=.5*(h.startScale+h.endScale),m=this.constrain(1-h.averageDepth/(this.perspective+this.depthOffset),.12,1),g=(.6+1.1*a.strength+1.2*s+1.5*c)*u*2.4*this.axonScaleFactor,S=Math.max(.45,g),x=200+70*d+30*a.hueShift+35*p+25*this.camera.yaw,f=(.05+.25*d+.28*c+.1*this.beatPulse)*m*this.axonScaleFactor,b=(.35+.5*d)*m*this.axonScaleFactor;t.lineWidth=S+3*u*this.axonScaleFactor,t.strokeStyle=`hsla(${x}, 82%, 55%, ${f})`,t.beginPath(),t.moveTo(h.start.x,h.start.y),t.quadraticCurveTo(h.control.x,h.control.y,h.end.x,h.end.y),t.stroke(),t.lineWidth=S,t.strokeStyle=`hsla(${x}, ${70+25*i}%, ${50+22*d}%, ${b})`,t.beginPath(),t.moveTo(h.start.x,h.start.y),t.quadraticCurveTo(h.control.x,h.control.y,h.end.x,h.end.y),t.stroke()}}updateSynapsePulses(){const t=(this.smoothedSubBass+this.smoothedBass+this.smoothedBassUpper)/3,e=.006+(this.smoothedLowMid+this.smoothedMid+this.smoothedUpperMid)/3*.04+(this.smoothedPresence+this.smoothedTreble+this.smoothedBrilliance)/3*.03;for(let s=this.synapsePulses.length-1;s>=0;s--){const i=this.synapsePulses[s],r=this.axons[i.axonIndex];if(!r){this.synapsePulses.splice(s,1);continue}if(!this.getAxonGeometry(r)){this.synapsePulses.splice(s,1);continue}const o=e*i.speed+.02*i.energy+.015*t;i.position+=o*i.direction,i.alpha*=.985,i.scale=this.lerp(i.scale,1+.6*i.energy+.5*this.beatPulse,.12),(i.position>1.15||i.position<-.15||i.alpha<.08)&&this.synapsePulses.splice(s,1)}}drawSynapsePulses(t){for(let e=0;e<this.synapsePulses.length;e++){const s=this.synapsePulses[e],i=this.axons[s.axonIndex];if(!i)continue;const r=this.getPointOnAxon(i,s.position);if(!r)continue;const o=this.constrain(1-r.depth/(this.perspective+this.depthOffset),.12,1),a=200+120*this.smoothedCentroid+80*s.hueShift,h=(1.2+.8*s.energy)*s.scale*r.scale*6*this.axonScaleFactor;t.fillStyle=`hsla(${a}, 100%, ${60+20*this.smoothedBrilliance}%, ${s.alpha*o*this.axonScaleFactor})`,t.beginPath(),t.arc(r.x,r.y,h,0,2*Math.PI),t.fill(),t.fillStyle=`hsla(${a}, 90%, 75%, ${.45*s.alpha*o*this.axonScaleFactor})`,t.beginPath(),t.arc(r.x,r.y,.6*h,0,2*Math.PI),t.fill()}}updateGreenCourier(t){const e=this.traversalPath;if(!e||e.length<2||!this.neurons||0===this.neurons.length)return;const s=this.greenCourier;s.lastMetric=t;const i=(.0045+.08*t+.018*this.smoothedFlux+.02*this.beatPulse)*this.trailSpeedFactor;for(s.t+=i;s.t>=1;)s.t-=1,s.segmentIndex=(s.segmentIndex+1)%e.length;for(;s.segmentIndex<0;)s.segmentIndex+=e.length;const r=e[s.segmentIndex],o=e[(s.segmentIndex+1)%e.length],a=this.neurons[r],h=this.neurons[o];if(!a||!h)return;const n=s.t,l=1-n,c=a.worldX*l+h.worldX*n,d=a.worldY*l+h.worldY*n,p=a.worldZ*l+h.worldZ*n,u=this.projectWorldPoint(c,d,p);s.screenX=u.x,s.screenY=u.y,s.depth=u.depth,s.scale=u.scale;const m=Math.min(1,(.55+.9*t)*(this.isCompactScreen?.85:1));a.traversalActivation=Math.max(a.traversalActivation||0,m*l),h.traversalActivation=Math.max(h.traversalActivation||0,m*n);const g=Math.max(2,Math.floor(e.length*(this.isCompactScreen?.24:.4))),S=Math.min(g,Math.max(1,Math.floor(t*e.length*.6)));for(let t=1;t<=S;t++){const i=e[(s.segmentIndex-t+e.length)%e.length],r=this.neurons[i];if(!r)continue;const o=m*Math.pow(.7,t)*(this.isCompactScreen?.85:1);r.traversalActivation=Math.max(r.traversalActivation||0,o)}this.greenTrail.unshift({x:u.x,y:u.y,depth:u.depth,scale:u.scale,alpha:(.75+.4*t)*this.courierScaleFactor,radius:Math.max(2,(8+18*t)*u.scale*this.trailScaleFactor),intensity:m});const x=Math.min(s.maxTrail,Math.floor((50+140*t)*this.trailDensityFactor)),f=this.isCompactScreen?.91:.94,b=this.isCompactScreen?.95:.97;for(let t=this.greenTrail.length-1;t>=0;t--){const e=this.greenTrail[t];e.alpha*=f,e.radius*=b,(e.alpha<.04||t>=x)&&this.greenTrail.splice(t,1)}}drawTraversalCourier(t){if(!this.traversalPath||this.traversalPath.length<2||!this.neurons||0===this.neurons.length)return;const e=125+35*this.smoothedPresence,s=this.perspective+this.depthOffset;if(this.greenTrail.length>0){const i=this.greenTrail.slice().sort((t,e)=>t.depth-e.depth);for(let r=0;r<i.length;r++){const o=i[r];if(!Number.isFinite(o.x)||!Number.isFinite(o.y))continue;const a=this.constrain(o.alpha,0,1);if(a<=.01)continue;const h=this.constrain(1-o.depth/s,.12,1),n=Math.max(1.2,o.radius);t.fillStyle=`hsla(${e}, 90%, ${58+20*o.intensity}%, ${a*h*this.courierScaleFactor})`,t.beginPath(),t.arc(o.x,o.y,n,0,2*Math.PI),t.fill(),t.fillStyle=`hsla(${e+6}, 95%, 72%, ${.5*a*h*this.courierScaleFactor})`,t.beginPath(),t.arc(o.x,o.y,.55*n,0,2*Math.PI),t.fill()}}const i=this.greenCourier;if(!Number.isFinite(i.screenX)||!Number.isFinite(i.screenY))return;const r=this.constrain(1-i.depth/s,.2,1),o=i.lastMetric||0,a=Math.max(2.2,(10+26*o)*i.scale*this.courierScaleFactor);let h=1.9*a*this.courierScaleFactor;this.isCompactScreen&&(h*=.65);const n=t.createRadialGradient(i.screenX,i.screenY,Math.max(1,.35*a),i.screenX,i.screenY,h),l=this.isCompactScreen?.58:.92,c=this.isCompactScreen?.38:.6;n.addColorStop(0,`hsla(${e+10}, 98%, 78%, ${l*r*this.courierScaleFactor})`),n.addColorStop(.55,`hsla(${e+4}, 92%, 62%, ${c*r*this.courierScaleFactor})`),n.addColorStop(1,"rgba(10, 25, 16, 0)"),t.fillStyle=n,t.beginPath(),t.arc(i.screenX,i.screenY,1.9*a*this.courierScaleFactor,0,2*Math.PI),t.fill(),t.fillStyle=`hsla(${e+8}, 100%, 84%, ${.95*r*this.courierScaleFactor})`,t.beginPath(),t.arc(i.screenX,i.screenY,.55*a*this.courierScaleFactor,0,2*Math.PI),t.fill()}drawNeurons(t){if(!this.neurons||0===this.neurons.length)return;const e=(this.smoothedPresence+this.smoothedTreble+this.smoothedBrilliance)/3,s=200+110*this.smoothedCentroid,i=this.neuronRenderOrder||[];for(let r=0;r<i.length;r++){const o=this.neurons[i[r]];if(!o)continue;if(!Number.isFinite(o.x)||!Number.isFinite(o.y))continue;const a=this.constrain(1-o.depth/(this.perspective+this.depthOffset),.12,1),h=Number.isFinite(o.scale)?o.scale:1;let n=(Number.isFinite(o.baseSize)?4.8*o.baseSize*this.neuronScaleFactor:6*this.neuronScaleFactor)*h*(.6+.9*(o.activation||0)+.3*this.beatPulse);n=Math.max(1.2,Number.isFinite(n)?n:2.4);let l=n*(1.7+.6*(o.activation||0)+.5*e)*this.neuronGlowFactor;if(this.isCompactScreen){const t=.68+.18*this.smooth.loud;l=Math.max(1.05*n,l*t)}(!Number.isFinite(l)||l<=0)&&(l=1.2*n);const c=s+6*o.clusterId,d=Math.max(.1,Number.isFinite(n)?.35*n:.3),p=Math.max(d+.01,l),u=t.createRadialGradient(o.x,o.y,d,o.x,o.y,p),m=(this.isCompactScreen?.65:.95)*a*this.neuronGlowFactor,g=(this.isCompactScreen?.38:.55)*a*this.neuronGlowFactor;u.addColorStop(0,`hsla(${c}, 90%, ${65+20*o.activation}%, ${m})`),u.addColorStop(.5,`hsla(${c+12}, 85%, ${50+25*o.activation}%, ${g})`),u.addColorStop(1,"rgba(10, 15, 30, 0)"),t.fillStyle=u,t.beginPath(),t.arc(o.x,o.y,l,0,2*Math.PI),t.fill();const S=(this.isCompactScreen?.6:.85)*a*this.neuronGlowFactor;if(t.fillStyle=`hsla(${c}, 100%, ${72+12*o.activation}%, ${S})`,t.beginPath(),t.arc(o.x,o.y,.6*n,0,2*Math.PI),t.fill(),(o.traversalActivation||0)>.03){const e=(o.traversalActivation||0)*a,s=125+35*this.smoothedPresence,i=n*(.9+1.6*o.traversalActivation)*this.traversalGlowFactor,r=this.isCompactScreen?.24:.4;t.fillStyle=`hsla(${s}, 92%, ${58+25*o.traversalActivation}%, ${r*e*this.traversalGlowFactor})`,t.beginPath(),t.arc(o.x,o.y,i,0,2*Math.PI),t.fill();const h=this.isCompactScreen?.45:.65;t.fillStyle=`hsla(${s}, 95%, 74%, ${h*e*this.traversalGlowFactor})`,t.beginPath(),t.arc(o.x,o.y,.35*n,0,2*Math.PI),t.fill()}const x=Math.min(.45,180*Math.abs(o.rotationSpeed||0)*a*this.neuronGlowFactor);if(x>.02){const e=.8*l;t.save(),t.translate(o.x,o.y),t.rotate(o.rotation||0),t.strokeStyle=`hsla(${c+22}, 95%, 78%, ${x})`,t.lineWidth=Math.max(.5,1.2*this.neuronScaleFactor),t.beginPath(),t.ellipse(0,0,e,.45*e,0,0,2*Math.PI),t.stroke(),t.rotate(Math.PI/2),t.beginPath(),t.ellipse(0,0,.72*e,.35*e,0,0,2*Math.PI),t.stroke(),t.restore()}}}drawRipples(t){if(!this.ripples.length)return;const e=200+90*this.smoothedCentroid;t.save(),t.translate(this.centerX,this.centerY),t.rotate(this.brainPlaneRotation),t.scale(this.brainPlaneScaleX,this.brainPlaneScaleY);for(let s=0;s<this.ripples.length;s++){const i=this.ripples[s];t.save(),t.translate(0,i.verticalShift),t.rotate(i.rotation),t.lineWidth=i.thickness,t.strokeStyle=`hsla(${e}, 80%, ${55+20*this.globalGlow}%, ${i.alpha*this.glowScaleFactor})`,t.beginPath(),t.ellipse(0,0,Math.max(1,i.radiusX),Math.max(1,i.radiusY),0,0,2*Math.PI),t.stroke(),t.restore()}t.restore()}updateRipples(){const t=6+40*this.smoothedSubBass+30*this.smoothedBass;for(let e=this.ripples.length-1;e>=0;e--){const s=this.ripples[e];s.radiusX=Math.max(1,s.radiusX+t*s.speed),s.radiusY=Math.max(1,s.radiusY+t*s.speed*(1.05+this.smoothedStereo*s.stereoTilt)),s.alpha*=.94,s.thickness=Math.max(.6,.96*s.thickness),s.verticalShift*=.95,s.alpha<.03&&this.ripples.splice(e,1)}}createRipple(t=1){const e={radiusX:Math.max(6,this.brainBounds.width*(.14+.03*t)*this.rippleScaleFactor),radiusY:Math.max(6,this.brainBounds.height*(.18+.04*t)*this.rippleScaleFactor),alpha:(.3+.25*t)*(this.isCompactScreen?.8:1),thickness:(2+2*t)*this.rippleScaleFactor,speed:(.38+.28*t)*this.trailSpeedFactor,rotation:.2*this.smoothedStereo+.35*this.camera.roll,verticalShift:(.45*this.smoothedStereo+.25*(this.smoothedMid-this.smoothedLowMid))*this.brainBounds.height*.06,stereoTilt:this.smoothedStereo*(.8+.2*t)};this.ripples.push(e),this.ripples.length>6&&this.ripples.shift()}triggerAxonPulses(t,e){const s=this.neurons[t];if(!s||!s.links||0===s.links.length)return;const i=1+Math.floor(2*e);for(let r=0;r<i;r++){const i=s.links[Math.floor(Math.random()*s.links.length)],r=this.axons[i];if(!r)continue;const o=.5*(s.bandProfile.presence+s.bandProfile.treble+s.bandProfile.brilliance),a=t===r.from?1:-1,h={axonIndex:i,position:1===a?.02:.98,speed:r.pulseSpeed,energy:e,scale:1,alpha:.75+.25*e,hueShift:o,direction:a};this.synapsePulses.push(h)}this.synapsePulses.length>120&&this.synapsePulses.splice(0,this.synapsePulses.length-120)}generateNeuralField(){this.neurons=[];const t=[{x:-.42,y:-.32,radius:.18,depth:-.35},{x:-.25,y:-.05,radius:.22,depth:-.24},{x:-.34,y:.28,radius:.2,depth:-.08},{x:.34,y:-.3,radius:.19,depth:.28},{x:.2,y:-.02,radius:.23,depth:.18},{x:.32,y:.28,radius:.21,depth:.32},{x:0,y:.05,radius:.18,depth:0},{x:-.08,y:-.28,radius:.16,depth:-.12}];let e=this.networkSeed;const s=["sub","bass","Bass","lowMid","mid","upperMid","presence","treble","brilliance"];for(let i=0;i<t.length;i++){const r=t[i],o=11+Math.floor(6*this.randomFromSeed(++e));for(let t=0;t<o;t++){const t=this.randomFromSeed(++e),o=this.randomFromSeed(++e),a=this.randomFromSeed(++e),h=t*Math.PI*2,n=r.radius*(.35+.65*o),l=.08*a,c=r.x+Math.cos(h)*n+(this.randomFromSeed(++e)-.5)*l,d=r.y+Math.sin(h)*n+(this.randomFromSeed(++e)-.5)*l*1.3,p=this.constrain((r.depth??0)+.6*(this.randomFromSeed(++e)-.5),-.65,.65),u={};let m=0;for(let t=0;t<s.length;t++){const r=s[t],o=this.clusterBiasForBand(r,i),a=.6*o+this.randomFromSeed(++e)*(1-o);u[r]=a,m+=a}for(let t=0;t<s.length;t++){const e=s[t];u[e]=m>0?u[e]/m:1/s.length}const g={nx:c,ny:d,nz:p,baseSize:2.2+1.8*this.randomFromSeed(++e),activation:0,charge:0,connectionFlux:0,bandProfile:u,clusterId:i,links:[],x:0,y:0,traversalActivation:0,noiseSeed:this.randomFromSeed(++e),rotation:0,rotationSpeed:0};this.neurons.push(g)}}}constructAxonNetwork(t=!1){if(!t)for(let t=0;t<this.neurons.length;t++)this.neurons[t].links=[];if(!t){this.axons=[];const t=new Set,e=this.brainBounds.width||1,s=this.brainBounds.height||1,i=this.depthSpan||.55*Math.min(e,s);for(let r=0;r<this.neurons.length;r++){const o=this.neurons[r],a=[];for(let t=0;t<this.neurons.length;t++){if(r===t)continue;const h=this.neurons[t],n=(o.nx-h.nx)*e,l=(o.ny-h.ny)*s,c=(o.nz-h.nz)*i,d=Math.sqrt(n*n+l*l+c*c);a.push({index:t,dist:d})}a.sort((t,e)=>t.dist-e.dist);const h=3+Math.floor(3*o.bandProfile.mid);for(let e=0;e<h&&e<a.length;e++){const s=a[e].index,i=r<s?`${r}-${s}`:`${s}-${r}`;if(t.has(i))continue;t.add(i);const h=.1+.45*this.randomFromSeed(++this.networkSeed),n=.6+.8*this.randomFromSeed(++this.networkSeed),l=1+1.5*this.randomFromSeed(++this.networkSeed),c=.8*(this.randomFromSeed(++this.networkSeed)-.5),d=1.4*(this.randomFromSeed(++this.networkSeed)-.5),p={from:r,to:s,curvature:h,strength:n,pulseSpeed:l,stereoInfluence:c,bandProfile:this.combineBandProfiles(this.neurons[r].bandProfile,this.neurons[s].bandProfile),hueShift:d,cachedLength:0},u=this.axons.length;o.links.push(u),this.neurons[s].links.push(u),this.axons.push(p)}}this.axonRenderOrder=[]}}computeTraversalPath(){if(!this.neurons||0===this.neurons.length)return void(this.traversalPath=[]);const t=this.neurons.map((t,e)=>({index:e,angle:Math.atan2(t.ny,t.nx),radius:Math.sqrt(t.nx*t.nx+t.ny*t.ny)}));t.sort((t,e)=>t.angle===e.angle?t.radius-e.radius:t.angle-e.angle),this.traversalPath=t.map(t=>t.index),this.greenCourier.segmentIndex=0,this.greenCourier.t=0,this.greenTrail=[]}combineBandProfiles(t,e){return{low:(t.sub+t.bass+t.Bass+e.sub+e.bass+e.Bass)/6,mid:(t.lowMid+t.mid+t.upperMid+e.lowMid+e.mid+e.upperMid)/6,high:(t.presence+t.treble+t.brilliance+e.presence+e.treble+e.brilliance)/6}}updateNeuronWorldPositions(){if(!this.neurons||0===this.neurons.length)return;const t=this.brainBounds.width,e=this.brainBounds.height,s=this.depthSpan||.55*Math.min(t,e),i=Math.sin(this.camera.yaw),r=Math.cos(this.camera.yaw),o=Math.sin(this.camera.pitch),a=Math.cos(this.camera.pitch),h=Math.sin(this.camera.roll),n=Math.cos(this.camera.roll),l=1+(.05*this.globalGlow+.04*this.smoothedFlux)*this.neuronGlowFactor;for(let c=0;c<this.neurons.length;c++){const d=this.neurons[c];let p=d.nx*t,u=d.ny*e,m=d.nz*s;m+=Math.sin(.35*this.flowPhase+8.3*d.noiseSeed)*s*.08*(.4+.6*this.smoothedEnergy);let g=p*r-m*i,S=p*i+m*r,x=u*a-S*o;S=u*o+S*a;const f=g*h+x*n;g=g*n-x*h,x=f;const b=this.depthOffset+S,M=Math.max(80,this.perspective-b),y=this.perspective/M,w=this.centerX+g*y,P=this.centerY+x*y;d.worldX=g,d.worldY=x,d.worldZ=S,d.x=w,d.y=P,d.depth=b,d.scale=y*l,d.projectScale=y}this.neuronRenderOrder&&this.neuronRenderOrder.length===this.neurons.length||(this.neuronRenderOrder=Array.from({length:this.neurons.length},(t,e)=>e)),this.neuronRenderOrder.sort((t,e)=>this.neurons[t].depth-this.neurons[e].depth),this.brainPlaneScaleX=1+.18*Math.abs(this.camera.pitch),this.brainPlaneScaleY=Math.max(.45,1-.35*this.camera.pitch),this.brainPlaneRotation=.35*this.camera.yaw}projectWorldPoint(t,e,s){const i=this.depthOffset+s,r=Math.max(80,this.perspective-i),o=this.perspective/r;return{x:this.centerX+t*o,y:this.centerY+e*o,depth:i,scale:o}}getAxonGeometry(t){if(!t)return null;if(t._frameComputed===this.frameCount&&t._geometry)return t._geometry;const e=this.neurons[t.from],s=this.neurons[t.to];if(!e||!s)return null;const i=e.worldX,r=e.worldY,o=e.worldZ,a=s.worldX,h=s.worldY,n=s.worldZ,l=.5*(i+a),c=.5*(r+h),d=.5*(o+n),p=a-i,u=h-r,m=n-o,g=Math.sqrt(p*p+u*u+m*m)||1,S=-u/g,x=p/g,f=m/g*.6,b=t.curvature*(.6+this.smoothedStereo*t.stereoInfluence*.5+.3*this.globalGlow),M={x:l+S*g*b,y:c+x*g*b,z:d+f*g*b},y=this.projectWorldPoint(M.x,M.y,M.z),w={x:e.x,y:e.y},P={x:s.x,y:s.y},F={start:w,control:y,end:P,length:Math.sqrt((P.x-w.x)**2+(P.y-w.y)**2),averageDepth:.5*(e.depth+s.depth),startScale:e.projectScale,endScale:s.projectScale,control3D:M,start3D:{x:i,y:r,z:o},end3D:{x:a,y:h,z:n}};return t._geometry=F,t._frameComputed=this.frameCount,F}getPointOnAxon(t,e){const s=this.getAxonGeometry(t);if(!s)return null;const i=this.constrain(e,0,1),r=1-i,o=r*r*s.start3D.x+2*r*i*s.control3D.x+i*i*s.end3D.x,a=r*r*s.start3D.y+2*r*i*s.control3D.y+i*i*s.end3D.y,h=r*r*s.start3D.z+2*r*i*s.control3D.z+i*i*s.end3D.z;return this.projectWorldPoint(o,a,h)}drawBrainOverlay(){if(!this.brainOverlay||!this.brainOverlay.ctx)return;const{ctx:t,canvas:e}=this.brainOverlay;t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.width,e.height);const s=this.centerX,i=this.centerY,r=this.brainBounds.width,o=this.brainBounds.height;if(!Number.isFinite(r)||!Number.isFinite(o)||r<=0||o<=0)return;t.save(),t.translate(s,i),t.rotate(this.brainPlaneRotation),t.scale(this.brainPlaneScaleX,this.brainPlaneScaleY);const a=.75*r*this.glowScaleFactor,h=.85*o*this.glowScaleFactor,n=t.createRadialGradient(0,0,Math.max(12,.25*a),0,0,a);n.addColorStop(0,`rgba(25, 30, 60, ${.28*this.glowScaleFactor})`),n.addColorStop(1,"rgba(0, 0, 0, 0)"),t.fillStyle=n,t.beginPath(),t.ellipse(0,0,a,h,0,0,2*Math.PI),t.fill(),t.strokeStyle=`rgba(70, 110, 180, ${.22*this.glowScaleFactor})`,t.lineWidth=1.2,t.beginPath(),t.ellipse(.18*-r,0,Math.max(.46*r*this.glowScaleFactor,1),Math.max(.52*o*this.glowScaleFactor,1),0,0,2*Math.PI),t.stroke(),t.beginPath(),t.ellipse(.18*r,0,Math.max(.46*r*this.glowScaleFactor,1),Math.max(.52*o*this.glowScaleFactor,1),0,0,2*Math.PI),t.stroke(),t.lineWidth=.9,t.strokeStyle=`rgba(80, 120, 200, ${.18*this.glowScaleFactor})`;for(let e=-3;e<=3;e++){const s=.22+.08*e,i=.28+.05*e;s<=0||i<=0||(t.beginPath(),t.ellipse(0,0,r*s*this.glowScaleFactor,o*i*this.glowScaleFactor,.05*e,0,2*Math.PI),t.stroke())}t.restore()}clusterBiasForBand(t,e){const s=e<3?-1:e>2?1:0;switch(t){case"sub":return-1===s?.6:1===s?.3:.4;case"bass":return-1===s?.55:1===s?.35:.45;case"Bass":return-1===s?.6:1===s?.4:.5;case"lowMid":return-1===s?.5:.55;case"mid":return 0===s?.7:.5;case"upperMid":return 1===s?.6:.45;case"presence":return 1===s?.7:.4;case"treble":return 1===s?.65:.4;case"brilliance":return 1===s?.75:.35;default:return.5}}randomFromSeed(t){return.5*(Math.sin(43758.5453123*t+.123)+1)%1}}"undefined"!=typeof window&&(window.NeuralConstellationVisualizer=NeuralConstellationVisualizer);