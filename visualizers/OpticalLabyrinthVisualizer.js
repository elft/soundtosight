class OpticalLabyrinthVisualizer extends BaseVisualizer{constructor(t=null,s={}){super(t,{backgroundColor:"#000000",force2d:!0,...s})}init(){this.centerOffset={x:0,y:0},this.gridPhase=0,this.gridRotation=0,this.gridWobble=0,this.gridSpacingTarget=Math.max(40,.08*Math.min(this.width,this.height)),this.ringPhase=0,this.ringTwist=0,this.ringRipple=0,this.bandDensity=0,this.panelShift=0,this.panelRotation=0,this.panelScale=1,this.panelDrift=0,this.beatRipple=0,this.lastAudioTime=null,this.smooth={subBass:0,bass:0,lowMid:0,mid:0,upperMid:0,presence:0,treble:0,brilliance:0,energy:0,flux:0,stereo:0,centroid:0},this.patternCanvas=document.createElement("canvas"),this.patternCanvas.width=256,this.patternCanvas.height=256,this.patternCtx=this.patternCanvas.getContext("2d"),this.stripePattern=null,this._buildStripePattern()}onResize(){this.centerOffset.x=0,this.centerOffset.y=0,this.gridSpacingTarget=Math.max(40,.08*Math.min(this.width,this.height)),this.stripePattern=null}_buildStripePattern(){const t=this.patternCtx,s=this.patternCanvas.width;t.clearRect(0,0,s,s),t.fillStyle="#000000",t.fillRect(0,0,s,s),t.save(),t.translate(s/2,s/2),t.rotate(Math.PI/4);const i=s*Math.SQRT2;for(let s=-i;s<i;s+=36)t.fillStyle="#ffffff",t.fillRect(-i,s,2*i,18);t.restore()}onUpdate(t){if(!t)return;const s=Number.isFinite(t.time)?t.time:this.lastAudioTime??performance.now()/1e3;null===this.lastAudioTime&&(this.lastAudioTime=s);const i=this.constrain(s-this.lastAudioTime,.001,.12);this.lastAudioTime=s;const e=this.safeNumber(t.subBassEnergy),h=this.safeNumber(t.bassEnergy??t.BassEnergy),r=this.safeNumber(t.lowMidEnergy),o=this.safeNumber(t.midEnergy),a=this.safeNumber(t.upperMidEnergy),n=this.safeNumber(t.presenceEnergy),l=this.safeNumber(t.trebleEnergy),p=this.safeNumber(t.brillianceEnergy),f=this.safeNumber(t.energy??t.overallEnergy??t.rms),m=this.safeNumber(t.spectralFlux),c=this.constrain(this.safeNumber(t.stereoBalance),-1,1);let d=this.safeNumber(t.spectralCentroidNormalized);if(d<=0||d>1){const s=this.safeNumber(t.centroid);d=s>0?this.constrain(this.map(s,0,2e4,0,1),0,1):.5}this.smooth.subBass=this.lerp(this.smooth.subBass,e,.16),this.smooth.bass=this.lerp(this.smooth.bass,h,.16),this.smooth.lowMid=this.lerp(this.smooth.lowMid,r,.14),this.smooth.mid=this.lerp(this.smooth.mid,o,.16),this.smooth.upperMid=this.lerp(this.smooth.upperMid,a,.16),this.smooth.presence=this.lerp(this.smooth.presence,n,.18),this.smooth.treble=this.lerp(this.smooth.treble,l,.18),this.smooth.brilliance=this.lerp(this.smooth.brilliance,p,.18),this.smooth.energy=this.lerp(this.smooth.energy,f,.2),this.smooth.flux=this.lerp(this.smooth.flux,m,.22),this.smooth.stereo=this.lerp(this.smooth.stereo,c,.2),this.smooth.centroid=this.lerp(this.smooth.centroid,d,.18);const b=this.safeNumber(t.bandCountActive),g=this.constrain(b/96,0,2);this.bandDensity=this.lerp(this.bandDensity,g,.14),this.gridPhase+=i*(.45+4.2*this.smooth.mid+1.8*this.smooth.presence),this.gridRotation+=i*(.6*this.smooth.stereo+.14*(this.smooth.flux-.25));const u=.12+.6*this.smooth.lowMid+.35*this.smooth.presence;this.gridWobble=this.lerp(this.gridWobble,u,.08);const M=Math.max(28,Math.min(this.width,this.height)*(.05+.03*this.smooth.energy));this.gridSpacingTarget=this.lerp(this.gridSpacingTarget,M,.12),this.ringPhase+=i*(.9+3.6*this.smooth.upperMid+1.2*this.smooth.presence);const y=.6+2.2*this.smooth.treble+2.6*this.smooth.brilliance;this.ringTwist=this.lerp(this.ringTwist,y,.1);const w=.12+.6*this.smooth.bass+.4*this.smooth.subBass;this.ringRipple=this.lerp(this.ringRipple,w,.12),this.panelShift+=i*(.55+3*this.smooth.presence+1.2*this.smooth.brilliance);const P=.4*this.smooth.stereo+.05*Math.sin(.5*this.gridPhase);this.panelRotation=this.lerp(this.panelRotation,P,.1);const x=1+.35*this.smooth.energy+.3*this.beatRipple;this.panelScale=this.lerp(this.panelScale,x,.12);const R=40+140*(this.smooth.treble+this.smooth.brilliance);this.panelDrift=this.lerp(this.panelDrift,R,.12);const S=.06*this.width*this.smooth.stereo;this.centerOffset.x=this.lerp(this.centerOffset.x,S,.12);const T=2*(this.smooth.centroid-.5),v=.045*this.height*T;if(this.centerOffset.y=this.lerp(this.centerOffset.y,v,.12),t.isBeat&&(this.beatRipple=Math.max(this.beatRipple,.9+.5*this.smooth.bass)),t.bassDrop){const s=this.safeNumber(t.bassDropIntensity);this.beatRipple=Math.max(this.beatRipple,1.1+.6*(s||this.smooth.bass))}const O=.08+.18*this.smooth.bass+.12*this.smooth.flux;this.beatRipple=this.lerp(this.beatRipple,0,O)}onRender(){const t=this.ctx;t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.fillStyle="#000000",t.fillRect(0,0,this.width,this.height),t.restore(),this.drawWarpedGrid(t),this.drawRadialVortex(t),this.drawMoiréPanels(t),this.drawPulseContours(t))}drawWarpedGrid(t){t.save();const s=this.gridSpacingTarget,i=Math.hypot(this.width,this.height),e=Math.min(80,Math.ceil(i/s)+2);t.translate(this.width/2+this.centerOffset.x,this.height/2+this.centerOffset.y),t.rotate(this.gridRotation),t.globalCompositeOperation="difference",t.globalAlpha=this.constrain(.45+.25*this.smooth.energy,.2,.85),t.strokeStyle="#ffffff",t.lineWidth=1.2+2.4*this.smooth.treble,t.beginPath();for(let h=-e;h<=e;h++){const e=Math.sin(this.gridPhase+.4*h)*s*this.gridWobble*(1+.4*this.smooth.flux),r=h*s+e;t.moveTo(-i,r),t.lineTo(i,h*s-e)}t.stroke(),t.rotate(Math.PI/2),t.beginPath();for(let h=-e;h<=e;h++){const e=Math.cos(.85*this.gridPhase+.55*h)*s*this.gridWobble*(.7+.5*this.smooth.presence),r=h*s+e;t.moveTo(-i,r),t.lineTo(i,h*s-e)}t.stroke(),t.restore()}drawRadialVortex(t){t.save(),t.translate(this.width/2+this.centerOffset.x,this.height/2+this.centerOffset.y),t.globalCompositeOperation="difference";const s=.5*Math.min(this.width,this.height),i=Math.min(28,Math.max(8,Math.floor(10+18*this.bandDensity))),e=Math.min(64,Math.max(20,Math.floor(24+40*this.smooth.presence))),h=1+.35*this.beatRipple;for(let r=0;r<i;r++){const o=r/i,a=s*o*h,n=Math.sin(this.ringPhase+o*this.ringTwist)*this.ringRipple*s*.25,l=Math.max(6,a+n);t.save(),t.rotate(.2*this.ringPhase+o*this.ringTwist*.5),t.globalAlpha=this.constrain(.18+.6*(1-o),.12,.9);const p=.6*this.smooth.brilliance+.4*this.smooth.treble,f=2*Math.PI/e,m=this.ringPhase*(.4+p);t.lineWidth=this.constrain((1-o)*(1.5+3*this.smooth.energy),.4,4.5),t.strokeStyle="#ffffff",t.beginPath();for(let s=0;s<e;s++){const i=s*f+m,e=i+f*(.55+p+Math.sin(2*i+6*o+this.ringPhase)*p*.75),h=Math.cos(i)*l,r=Math.sin(i)*l;t.moveTo(h,r),t.arc(0,0,l,i,e)}t.stroke(),t.restore()}t.restore()}"drawMoiréPanels"(t){if(!this.stripePattern&&this.ctx&&(this.stripePattern=this.ctx.createPattern(this.patternCanvas,"repeat")),!this.stripePattern)return;const s=Math.min(this.width,this.height),i=.26*s*this.panelScale,e=s*(this.width>this.height?.62:.78)*(.9+.2*this.smooth.mid),h=.32*s,r=Math.sin(.8*this.panelShift)*s*.04;t.save(),t.globalCompositeOperation="difference",[-h,0,h].forEach((s,h)=>{t.save(),t.translate(this.width/2+this.centerOffset.x,this.height/2+this.centerOffset.y);const o=this.panelRotation+.18*(h-1)+.08*Math.sin(this.panelShift+h)*(.6+this.smooth.flux);t.rotate(o);const a=s+r*(h-1);t.translate(a,0);const n=1+.22*Math.sin(.6*this.panelShift+h)*(.4+this.smooth.presence);t.scale(1,n),t.save(),t.translate(-i/2,-e/2),t.fillStyle=this.stripePattern,t.fillRect(.5*-this.panelDrift,.5*-this.panelDrift,i+this.panelDrift,e+this.panelDrift),t.restore(),t.lineWidth=2,t.strokeStyle="#ffffff",t.strokeRect(-i/2,-e/2,i,e),t.restore()}),t.restore()}drawPulseContours(t){t.save(),t.translate(this.width/2+this.centerOffset.x,this.height/2+this.centerOffset.y),t.globalCompositeOperation="difference";const s=.18*Math.min(this.width,this.height);for(let i=0;i<6;i++){const e=i/6,h=s*(1+2.2*e+this.beatRipple*(1-e)*.6),r=.3*this.smooth.stereo+.1*Math.sin(this.gridPhase+i)+1;t.save(),t.rotate(.15*this.ringPhase+e*Math.PI*.5),t.scale(1+.2*this.smooth.stereo,r),t.globalAlpha=this.constrain(.2+(1-e)*(.4+.3*this.smooth.energy),.15,.8),t.lineWidth=1+1.6*this.smooth.treble,t.beginPath(),t.ellipse(0,0,h,h*(.8+.6*this.smooth.lowMid),0,0,2*Math.PI),t.strokeStyle="#ffffff",t.stroke(),t.restore()}t.restore()}safeNumber(t){return"number"==typeof t&&Number.isFinite(t)?t:0}}"undefined"!=typeof window&&(window.OpticalLabyrinthVisualizer=OpticalLabyrinthVisualizer);