class DivineEmbersVisualizer extends BaseVisualizer{constructor(s,t){super(s,{backgroundColor:"#000000",force2d:!0,stereo:!0,...t})}init(){this.fireCoreX=0,this.fireCoreY=0,this.fireCoreRadius=0,this.fireCorePulse=0,this.embers=[],this.maxEmbers=40,this.fireHue=0,this.targetFireHue=0,this.smokeDistortion=0,this.glyphShapes=[],this.sparkles=[],this.maxSparkles=30,this.smoothedBass=0,this.smoothedMid=0,this.smoothedTreble=0,this.smoothedCentroid=0,this.smoothedEnergyChange=0,this.beatPhase=0,this.tempo=120,this.noiseOffset=0}onUpdate(s){const t=.15;this.smoothedBass=this.lerp(this.smoothedBass,s.bassEnergy||0,t),this.smoothedMid=this.lerp(this.smoothedMid,s.midEnergy||0,t),this.smoothedTreble=this.lerp(this.smoothedTreble,s.trebleEnergy||0,t),this.smoothedCentroid=this.lerp(this.smoothedCentroid,s.spectralCentroidNormalized||0,t),this.smoothedEnergyChange=this.lerp(this.smoothedEnergyChange,s.energyChangeIntensity||0,.3),this.fireCoreRadius=this.map(this.smoothedBass,0,1,30,120),this.fireCorePulse=this.smoothedBass,this.targetFireHue=this.map(this.smoothedCentroid,0,1,0,60),this.fireHue=this.lerp(this.fireHue,this.targetFireHue,.05);const e=Math.floor(this.map(this.smoothedMid,0,1,20,this.maxEmbers)),i=this.map(this.smoothedMid,0,1,.5,3);for(;this.embers.length<e;)this.spawnEmber(i);this.tempo=s.tempo||120,this.beatPhase=s.beatPhase||0;const h=this.smoothedTreble,o=this.map(this.smoothedTreble,0,1,.02,.15),r=Math.floor(h*this.maxSparkles);for(;this.sparkles.length<r;)this.spawnSparkle();this.smokeDistortion=30*this.smoothedEnergyChange,s.isBeat&&this.createGlyph(),this.updateEmbers(i,o),this.updateSparkles(),this.updateGlyphs(),this.noiseOffset+=.01,this.fireCoreX=this.width/2,this.fireCoreY=.85*this.height}onRender(){const s=this.ctx;s.fillStyle="rgba(0, 0, 0, 0.08)",s.fillRect(0,0,this.width,this.height),s.globalCompositeOperation="lighter",this.smokeDistortion>0&&this.drawSmokeDistortion(),this.drawEmbers(),this.drawSparkles(),this.drawGlyphs(),s.globalCompositeOperation="source-over"}spawnEmber(s){const t=this.random(-Math.PI/6,Math.PI/6)-Math.PI/2,e=this.random(.5*s,1.5*s),i=this.fireCoreRadius*this.random(.3,1.2),h=this.random(0,2*Math.PI);this.embers.push({x:this.fireCoreX+Math.cos(h)*i*this.random(0,1),y:this.fireCoreY+Math.sin(h)*i*this.random(0,.5),vx:Math.cos(t)*e*this.random(.5,1.5),vy:Math.sin(t)*e,life:1,size:this.random(2,8),rotation:this.random(0,2*Math.PI),rotationSpeed:this.random(-.05,.05),flickerPhase:this.random(0,2*Math.PI),glyphMember:!1})}updateEmbers(s,t){for(let s=this.embers.length-1;s>=0;s--){const e=this.embers[s];e.glyphMember||(e.x+=e.vx,e.y+=e.vy,e.vy-=.05,e.vx+=this.random(-.05,.05),e.vx*=.99,e.vy*=.98,e.rotation+=e.rotationSpeed,e.flickerPhase+=t,e.life-=.005+.001*Math.abs(e.vy),(e.life<=0||e.y<-50||e.x<-50||e.x>this.width+50)&&this.embers.splice(s,1))}}drawEmbers(){const s=this.ctx;for(const t of this.embers){if(t.glyphMember)continue;const e=t.life,i=.3*Math.sin(t.flickerPhase)+.7,h=t.size*i,o=t.life;let r=this.fireHue,a=100,l=this.map(o,0,1,30,90);this.smoothedCentroid>.7&&(a=this.map(this.smoothedCentroid,.7,1,100,20),l=this.map(this.smoothedCentroid,.7,1,70,95)),s.save(),s.translate(t.x,t.y),s.rotate(t.rotation),s.shadowBlur=15+10*i,s.shadowColor=`hsla(${r}, ${a}%, ${l}%, ${e})`,s.beginPath();const n=6;for(let t=0;t<n;t++){const e=t/n*Math.PI*2,i=h*(.7+this.random(-.3,.3)),o=Math.cos(e)*i,r=Math.sin(e)*i;0===t?s.moveTo(o,r):s.lineTo(o,r)}s.closePath(),s.fillStyle=`hsla(${r}, ${a}%, ${l}%, ${.9*e})`,s.fill(),s.shadowBlur=8,s.beginPath(),s.arc(0,0,.4*h,0,2*Math.PI),s.fillStyle=`hsla(${r+10}, 100%, ${Math.min(95,l+20)}%, ${e})`,s.fill(),s.restore()}}spawnSparkle(){const s=this.embers[Math.floor(this.random(0,this.embers.length))]||{x:this.fireCoreX,y:this.fireCoreY};this.sparkles.push({x:s.x+this.random(-20,20),y:s.y+this.random(-20,20),vx:this.random(-.5,.5),vy:this.random(-1,-.2),life:this.random(.5,1),size:this.random(1,3),brightness:this.random(.7,1)})}updateSparkles(){for(let s=this.sparkles.length-1;s>=0;s--){const t=this.sparkles[s];t.x+=t.vx,t.y+=t.vy,t.vy-=.02,t.life-=.02,t.life<=0&&this.sparkles.splice(s,1)}}drawSparkles(){const s=this.ctx;for(const t of this.sparkles){const e=t.life*t.brightness;s.shadowBlur=6,s.shadowColor=`rgba(255, 255, 255, ${e})`,s.beginPath(),s.arc(t.x,t.y,t.size,0,2*Math.PI),s.fillStyle=`rgba(255, 255, 255, ${e})`,s.fill()}s.shadowBlur=0}createGlyph(){const s=["circle","spiral","star","cross","diamond"],t=s[Math.floor(this.random(0,s.length))],e=this.width/2,i=.4*this.height,h=Math.floor(this.random(8,16)),o=[],r=[...this.embers].sort((s,t)=>Math.hypot(s.x-e,s.y-i)-Math.hypot(t.x-e,t.y-i));for(let s=0;s<Math.min(h,r.length);s++){const t=r[s];t.glyphMember||(o.push(t),t.glyphMember=!0)}if(0===o.length)return;const a=this.calculateGlyphPositions(t,o.length,e,i);this.glyphShapes.push({type:t,embers:o,targetPositions:a,life:1,formationProgress:0})}calculateGlyphPositions(s,t,e,i){const h=[],o=80;switch(s){case"circle":for(let s=0;s<t;s++){const r=s/t*Math.PI*2;h.push({x:e+Math.cos(r)*o,y:i+Math.sin(r)*o})}break;case"spiral":for(let s=0;s<t;s++){const r=s/t,a=r*Math.PI*4,l=o*r;h.push({x:e+Math.cos(a)*l,y:i+Math.sin(a)*l})}break;case"star":const s=5;for(let r=0;r<t;r++){const a=Math.floor(r/t*s*2),l=a/(2*s)*Math.PI*2-Math.PI/2,n=a%2==0?o:40;h.push({x:e+Math.cos(l)*n,y:i+Math.sin(l)*n})}break;case"cross":const r=o;for(let s=0;s<t;s++){const o=Math.floor(s/t*4),a=(s%Math.ceil(t/4)/Math.ceil(t/4)-.5)*r;switch(o){case 0:h.push({x:e+a,y:i});break;case 1:h.push({x:e,y:i+a});break;case 2:h.push({x:e-a,y:i});break;case 3:h.push({x:e,y:i-a})}}break;case"diamond":const a=Math.ceil(t/4);for(let s=0;s<t;s++){const t=s%a/a;switch(Math.floor(s/a)){case 0:h.push({x:e+t*o,y:i-o+t*o});break;case 1:h.push({x:e+o-t*o,y:i+t*o});break;case 2:h.push({x:e-t*o,y:i+o-t*o});break;case 3:h.push({x:e-o+t*o,y:i-t*o})}}}return h}updateGlyphs(){for(let s=this.glyphShapes.length-1;s>=0;s--){const t=this.glyphShapes[s];if(t.formationProgress<1){t.formationProgress+=.05;for(let s=0;s<t.embers.length;s++){const e=t.embers[s],i=t.targetPositions[s];e.x=this.lerp(e.x,i.x,.15),e.y=this.lerp(e.y,i.y,.15),e.vx*=.85,e.vy*=.85}}else if(t.life-=.02,t.life<.5)for(const s of t.embers)s.glyphMember=!1,s.vx+=this.random(-1,1),s.vy+=this.random(-2,-.5);t.life<=0&&this.glyphShapes.splice(s,1)}}drawGlyphs(){const s=this.ctx;for(const t of this.glyphShapes){const e=Math.min(t.formationProgress,t.life);if(t.embers.length>1&&e>.3){s.strokeStyle=`hsla(${this.fireHue+40}, 100%, 70%, ${.4*e})`,s.lineWidth=2,s.shadowBlur=10,s.shadowColor=`hsla(${this.fireHue+40}, 100%, 70%, ${e})`,s.beginPath(),s.moveTo(t.embers[0].x,t.embers[0].y);for(let e=1;e<t.embers.length;e++)s.lineTo(t.embers[e].x,t.embers[e].y);s.closePath(),s.stroke()}for(const i of t.embers)s.shadowBlur=25,s.shadowColor=`hsla(${this.fireHue+40}, 100%, 80%, ${e})`,s.beginPath(),s.arc(i.x,i.y,1.5*i.size,0,2*Math.PI),s.fillStyle=`hsla(${this.fireHue+40}, 100%, 85%, ${.9*e})`,s.fill()}s.shadowBlur=0}drawSmokeDistortion(){const s=this.ctx,t=Math.min(this.smokeDistortion/30,.3);s.save(),s.globalAlpha=t;for(let t=0;t<3;t++){s.beginPath();const e=this.fireCoreY-50-40*t,i=20+2*this.smokeDistortion,h=.01;s.moveTo(0,e);for(let o=0;o<=this.width;o+=5){const r=e+Math.sin(o*h+2*this.noiseOffset+t)*i;s.lineTo(o,r)}s.strokeStyle=`rgba(100, 80, 60, ${.3-.1*t})`,s.lineWidth=15-3*t,s.lineCap="round",s.shadowBlur=20,s.shadowColor="rgba(100, 80, 60, 0.5)",s.stroke()}s.restore(),s.shadowBlur=0}onResize(){this.fireCoreX=this.width/2,this.fireCoreY=.85*this.height}random(s,t){return Math.random()*(t-s)+s}lerp(s,t,e){return s+(t-s)*e}map(s,t,e,i,h){return i+(s-t)/(e-t)*(h-i)}}"undefined"!=typeof window&&(window.DivineEmbersVisualizer=DivineEmbersVisualizer);