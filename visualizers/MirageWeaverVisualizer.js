class MirageWeaverVisualizer extends BaseVisualizer{constructor(t,s){super(t,{backgroundColor:"#000000",force2d:!0,...s})}init(){this.distortionIntensity=0,this.warpAmplitude=0,this.distortionPhase=0,this.oscillationSpeed=0,this.tintHue=0,this.tintSaturation=0,this.glitchParticles=[],this.maxGlitches=50,this.glassShards=[],this.glassOpacity=0,this.explosionWaves=[],this.lastExplosion=0,this.sourceCanvas=document.createElement("canvas"),this.sourceCtx=this.sourceCanvas.getContext("2d"),this.glassOverlay=this.createOverlay("glass",10),this.gridResolution=32,this.distortionGrid=this.createDistortionGrid(),this.generateBackgroundGradient(),this.smoothedRms=0,this.smoothedBass=0,this.smoothedFlux=0,this.smoothedCentroid=0,this.smoothedFlatness=0}createDistortionGrid(){const t=[],s=this.gridResolution,i=Math.ceil(s*(this.height/this.width));for(let h=0;h<i;h++)for(let e=0;e<s;e++)t.push({x:e/(s-1)*this.width,y:h/(i-1)*this.height,offsetX:0,offsetY:0,phase:Math.random()*Math.PI*2});return this.gridCols=s,this.gridRows=i,t}generateBackgroundGradient(){this.bgGradient=this.ctx.createLinearGradient(0,0,this.width,this.height),this.bgGradient.addColorStop(0,"#0a0520"),this.bgGradient.addColorStop(.3,"#1a0f30"),this.bgGradient.addColorStop(.6,"#150a28"),this.bgGradient.addColorStop(1,"#0d0618")}onUpdate(t){const s=.15;this.smoothedRms=this.lerp(this.smoothedRms,t.rms||0,s),this.smoothedBass=this.lerp(this.smoothedBass,t.bassEnergy||0,s),this.smoothedFlux=this.lerp(this.smoothedFlux,t.spectralFlux||0,s),this.smoothedCentroid=this.lerp(this.smoothedCentroid,t.centroid||0,s),this.smoothedFlatness=this.lerp(this.smoothedFlatness,t.flatness||0,s),this.distortionIntensity=this.map(this.smoothedRms,0,.4,0,1),this.warpAmplitude=this.map(this.smoothedBass,0,1,10,120),this.smoothedFlux>.15&&this.glitchParticles.length<this.maxGlitches&&this.spawnGlitchArtifact(t);const i=this.map(Math.log(this.smoothedCentroid+1),Math.log(1),Math.log(2e4),0,1);this.tintHue=this.map(i,0,1,0,240),this.tintSaturation=this.map(this.smoothedRms,0,.5,20,70);const h=t.beatPhase||0;this.oscillationSpeed=this.map(h,0,1,.02,.08),this.distortionPhase+=this.oscillationSpeed,this.glassOpacity=this.map(this.smoothedFlatness,.3,1,0,.4),this.smoothedFlatness>.5&&this.glassShards.length<30&&this.generateGlassShards(),t.isMassiveEnergyChange&&t.time-this.lastExplosion>1&&(this.triggerExplosion(t),this.lastExplosion=t.time),this.updateDistortionGrid(t),this.updateGlitchParticles(),this.updateExplosionWaves(),this.updateGlassShards()}updateDistortionGrid(t){this.smoothedBass;const s=this.distortionPhase;for(let i=0;i<this.distortionGrid.length;i++){const h=this.distortionGrid[i],e=h.x/this.width,a=h.y/this.height,o=Math.sin(e*Math.PI*3+s)*this.warpAmplitude,l=Math.cos(a*Math.PI*2+.7*s)*this.warpAmplitude*.6,r=Math.sin((e+a)*Math.PI*4+1.3*s)*this.warpAmplitude*.3,n=e-.5,d=a-.5,c=Math.sqrt(n*n+d*d),p=Math.sin(c*Math.PI*8+2*s)*this.warpAmplitude*.5;h.offsetX=(o+r+p*n)*this.distortionIntensity,h.offsetY=(l+r+p*d)*this.distortionIntensity;const f=20*(t.stereoBalance||0);h.offsetX+=f}}spawnGlitchArtifact(t){const s=Math.floor(3*Math.random())+1;for(let t=0;t<s;t++)this.glitchParticles.push({x:Math.random()*this.width,y:Math.random()*this.height,width:100*Math.random()+50,height:20*Math.random()+5,offsetX:30*(Math.random()-.5),offsetY:30*(Math.random()-.5),alpha:.6*Math.random()+.3,life:1,color:`hsl(${this.tintHue+60*Math.random()-30}, 80%, 60%)`})}updateGlitchParticles(){for(let t=this.glitchParticles.length-1;t>=0;t--){const s=this.glitchParticles[t];s.life-=.02,s.alpha=.8*s.life,s.y+=.1*s.offsetY,s.x+=.1*s.offsetX,s.life<=0&&this.glitchParticles.splice(t,1)}}generateGlassShards(){const t=Math.floor(5*Math.random())+3;for(let s=0;s<t;s++){const t=Math.random()*this.width,s=Math.random()*this.height,i=Math.floor(3*Math.random())+4,h=[],e=80*Math.random()+40;for(let a=0;a<i;a++){const o=a/i*Math.PI*2,l=e*(.7+.6*Math.random());h.push({x:t+Math.cos(o)*l,y:s+Math.sin(o)*l})}this.glassShards.push({vertices:h,rotation:Math.random()*Math.PI*2,rotationSpeed:.02*(Math.random()-.5),alpha:.3*Math.random()+.1,life:1,drift:{x:.5*(Math.random()-.5),y:.5*(Math.random()-.5)}})}}updateGlassShards(){for(let t=this.glassShards.length-1;t>=0;t--){const s=this.glassShards[t];s.rotation+=s.rotationSpeed;for(const t of s.vertices)t.x+=s.drift.x,t.y+=s.drift.y;s.life-=.005,s.alpha=.3*s.life,s.life<=0&&this.glassShards.splice(t,1)}}triggerExplosion(t){const s=this.width/2,i=this.height/2;for(let t=0;t<1;t++)this.explosionWaves.push({x:s,y:i,radius:30*t,maxRadius:1.5*Math.max(this.width,this.height),speed:8+2*t,thickness:40-6*t,alpha:.8-.1*t,life:1,color:"red"})}updateExplosionWaves(){for(let t=this.explosionWaves.length-1;t>=0;t--){const s=this.explosionWaves[t];s.radius+=s.speed,s.speed*=1.02,s.life=1-s.radius/s.maxRadius,s.alpha=.8*s.life,s.radius>=s.maxRadius&&this.explosionWaves.splice(t,1)}}onRender(){const t=this.ctx;t.fillStyle=this.bgGradient,t.fillRect(0,0,this.width,this.height),t.globalAlpha=this.map(this.distortionIntensity,0,1,.1,.3),t.fillStyle=`hsl(${this.tintHue}, ${this.tintSaturation}%, 30%)`,t.fillRect(0,0,this.width,this.height),t.globalAlpha=1,this.sourceCanvas.width=this.canvas.width,this.sourceCanvas.height=this.canvas.height,this.sourceCtx.drawImage(this.canvas,0,0),t.fillStyle="#000000",t.fillRect(0,0,this.width,this.height),this.drawDistortedImage(),this.drawEnergyStreams(),this.drawGlitchParticles(),this.drawExplosionWaves(),this.drawGlassShards(),this.drawScanlines()}drawDistortedImage(){const t=this.ctx,s=this.gridCols,i=this.gridRows;for(let h=0;h<i-1;h++)for(let i=0;i<s-1;i++){const e=h*s+i,a=h*s+(i+1),o=(h+1)*s+(i+1),l=(h+1)*s+i,r=this.distortionGrid[e],n=this.distortionGrid[a],d=this.distortionGrid[o],c=this.distortionGrid[l],p=r.x*this.dpr,f=r.y*this.dpr,g=(n.x-r.x)*this.dpr,m=(c.y-r.y)*this.dpr;if(!(!isFinite(g)||!isFinite(m)||g<=0||m<=0)){t.save(),t.beginPath(),t.moveTo(r.x+r.offsetX,r.y+r.offsetY),t.lineTo(n.x+n.offsetX,n.y+n.offsetY),t.lineTo(d.x+d.offsetX,d.y+d.offsetY),t.lineTo(c.x+c.offsetX,c.y+c.offsetY),t.closePath(),t.clip();try{t.drawImage(this.sourceCanvas,p,f,g,m,r.x+r.offsetX,r.y+r.offsetY,n.x-r.x,c.y-r.y)}catch(t){}t.restore()}}}drawEnergyStreams(){const t=this.ctx,s=this.distortionPhase;t.globalAlpha=this.map(this.distortionIntensity,0,1,.1,.4),t.lineWidth=2;for(let i=0;i<8;i++){const h=i/8*60,e=i/8*this.height;t.strokeStyle=`hsl(${this.tintHue+h}, 80%, 60%)`,t.beginPath();for(let h=0;h<this.width;h+=5){const a=h/this.width,o=e+30*Math.sin(a*Math.PI*4+s+i)*this.distortionIntensity;0===h?t.moveTo(h,o):t.lineTo(h,o)}t.stroke()}t.globalAlpha=1}drawGlitchParticles(){const t=this.ctx;for(const s of this.glitchParticles){t.globalAlpha=s.alpha,t.fillStyle=s.color,t.fillRect(s.x,s.y,s.width,s.height),t.globalAlpha=.5*s.alpha,t.fillStyle="#ffffff";for(let i=0;i<s.height;i+=3)t.fillRect(s.x,s.y+i,s.width,1)}t.globalAlpha=1}drawExplosionWaves(){const t=this.ctx;for(const s of this.explosionWaves){const i=Math.max(0,s.radius-s.thickness/2),h=Math.max(i+1,s.radius+s.thickness/2),e=t.createRadialGradient(s.x,s.y,i,s.x,s.y,h);e.addColorStop(0,`hsla(${this.tintHue}, 100%, 60%, 0)`),e.addColorStop(.5,`hsla(${this.tintHue}, 100%, 60%, ${s.alpha})`),e.addColorStop(1,`hsla(${this.tintHue}, 100%, 60%, 0)`),t.strokeStyle=e,t.lineWidth=s.thickness,t.beginPath(),t.arc(s.x,s.y,s.radius,0,2*Math.PI),t.stroke()}}drawGlassShards(){const t=this.glassOverlay.ctx;if(t.clearRect(0,0,this.width,this.height),!(this.glassOpacity<.05))for(const s of this.glassShards){t.save(),t.globalAlpha=s.alpha*this.glassOpacity,t.beginPath();const i=s.vertices;t.moveTo(i[0].x,i[0].y);for(let s=1;s<i.length;s++)t.lineTo(i[s].x,i[s].y);t.closePath(),t.fillStyle=`hsla(${this.tintHue+30}, 40%, 80%, 0.1)`,t.fill(),t.strokeStyle=`hsla(${this.tintHue+30}, 60%, 90%, 0.6)`,t.lineWidth=2,t.stroke(),t.strokeStyle="hsla(0, 0%, 100%, 0.8)",t.lineWidth=1,t.beginPath(),t.moveTo(i[0].x,i[0].y),t.lineTo(i[1].x,i[1].y),t.stroke(),t.restore()}}drawScanlines(){const t=this.ctx;t.globalAlpha=.03,t.fillStyle="#000000";for(let s=0;s<this.height;s+=4)t.fillRect(0,s,this.width,2);t.globalAlpha=1}onResize(){this.distortionGrid=this.createDistortionGrid(),this.generateBackgroundGradient(),this.glitchParticles=[],this.explosionWaves=[],this.glassShards=[]}destroy(){this.sourceCanvas=null,this.sourceCtx=null,super.destroy()}}"undefined"!=typeof window&&(window.MirageWeaverVisualizer=MirageWeaverVisualizer);