class DreamingGroveVisualizer extends BaseVisualizer{constructor(t,e={}){super(t,{...e,backgroundColor:"#0a0a0f",force2d:!0})}init(){this.centerX=this.width/2,this.centerY=this.height/2,this.branches=[],this.roots=[],this.leaves=[],this.pollenParticles=[],this.smoothedRms=0,this.smoothedBass=0,this.smoothedMid=0,this.smoothedTreble=0,this.smoothedBrilliance=0,this.smoothedCentroid=0,this.smoothedFlatness=.5,this.smoothedStereo=0,this.smoothedDb=-60,this.breathScale=1,this.targetBreathScale=1,this.zoomScale=1,this.targetZoomScale=1,this.sapPulse=0,this.sapPulseDecay=.92,this.groveHue=120,this.initializeGrove(),this.maxPollen=150,this.pollenSpawnRate=0}initializeGrove(){const t={x:this.centerX,y:.9*this.height,endX:this.centerX,endY:this.centerY,thickness:12,generation:0,angle:-Math.PI/2,growth:1,children:[]};this.branches.push(t),this.growBranch(t,6),this.generateRoots(8),this.generateLeaves()}growBranch(t,e,s=.3){if(t.generation>=e)return void this.createLeaf(t.endX,t.endY);const h=0===t.generation?3:Math.random()<.6?2:1;for(let a=0;a<h;a++){const h=(Math.random()-.5)*Math.PI*.5*(1+s),a=t.angle+h,i=(80-10*t.generation)*(.7+.6*Math.random()),o=t.endX+Math.cos(a)*i,n=t.endY+Math.sin(a)*i,r={x:t.endX,y:t.endY,endX:o,endY:n,thickness:Math.max(1,.65*t.thickness),generation:t.generation+1,angle:a,growth:0,parent:t,children:[],phaseOffset:Math.random()*Math.PI*2};t.children.push(r),this.branches.push(r),this.growBranch(r,e,s)}}generateRoots(t){for(let e=0;e<t;e++){const s=e/t*Math.PI*2,h=60+100*Math.random(),a={x:this.centerX,y:this.centerY,endX:this.centerX+Math.cos(s)*h,endY:this.centerY+Math.sin(s)*h,thickness:3+3*Math.random(),angle:s,baseLength:h,growth:1,wiggle:Math.random()*Math.PI*2};this.roots.push(a)}}generateLeaves(){this.leaves=[],this.branches.forEach(t=>{t.generation>=4&&Math.random()<.7&&this.createLeaf(t.endX,t.endY,t)})}createLeaf(t,e,s=null){const h={x:t,y:e,size:4+6*Math.random(),angle:Math.random()*Math.PI*2,rotation:0,swayPhase:Math.random()*Math.PI*2,swaySpeed:.02+.03*Math.random(),alpha:.6+.4*Math.random(),branch:s};this.leaves.push(h)}spawnPollen(t,e,s=1){for(let h=0;h<s&&!(this.pollenParticles.length>=this.maxPollen);h++){const s=Math.random()*Math.PI*2,h=.5+1.5*Math.random();this.pollenParticles.push({x:t+20*(Math.random()-.5),y:e+20*(Math.random()-.5),vx:Math.cos(s)*h,vy:Math.sin(s)*h-.3,size:1.5+2.5*Math.random(),life:1,decay:.005+.01*Math.random(),twinkle:Math.random()*Math.PI*2})}}onUpdate(t){const e=.15;this.smoothedRms=this.lerp(this.smoothedRms,t.rms||0,e),this.smoothedBass=this.lerp(this.smoothedBass,t.bassEnergy||0,.2),this.smoothedMid=this.lerp(this.smoothedMid,t.midEnergy||0,e),this.smoothedTreble=this.lerp(this.smoothedTreble,t.trebleEnergy||0,e),this.smoothedBrilliance=this.lerp(this.smoothedBrilliance,t.brillianceEnergy||0,e),this.smoothedCentroid=this.lerp(this.smoothedCentroid,t.centroid||.5,.1),this.smoothedFlatness=this.lerp(this.smoothedFlatness,t.flatness||.5,.08),this.smoothedStereo=this.lerp(this.smoothedStereo,t.stereoBalance||0,.12);const s=t.aWeighted?.mono?.db??-60;this.smoothedDb=this.lerp(this.smoothedDb,s,.12),this.targetBreathScale=1+.15*this.smoothedRms,this.breathScale=this.lerp(this.breathScale,this.targetBreathScale,.1);const h=this.constrain((this.smoothedDb+60)/50,0,1);this.targetZoomScale=.8+.5*h,this.zoomScale=this.lerp(this.zoomScale,this.targetZoomScale,.08),t.isBeat&&(this.sapPulse=1),this.sapPulse*=this.sapPulseDecay;const a=this.map(this.smoothedCentroid,0,1,120,270);if(this.groveHue=this.lerp(this.groveHue,a,.05),this.roots.forEach(t=>{const e=40*this.smoothedBass,s=t.baseLength+e;t.endX=t.x+Math.cos(t.angle)*s,t.endY=t.y+Math.sin(t.angle)*s,t.wiggle+=.01}),t.bassDrop&&Math.random()<.3){const t=this.roots[Math.floor(Math.random()*this.roots.length)];t&&this.spawnPollen(t.endX,t.endY,3)}const i=.1*this.smoothedMid;this.leaves.forEach(t=>{t.swayPhase+=t.swaySpeed,t.rotation=Math.sin(t.swayPhase)*i});const o=.5*(this.smoothedTreble+this.smoothedBrilliance);if(o>.3&&Math.random()<.15*o&&this.leaves.length>0){const t=this.leaves[Math.floor(Math.random()*this.leaves.length)];this.spawnPollen(t.x,t.y,1)}this.pollenParticles=this.pollenParticles.filter(t=>(t.x+=t.vx,t.y+=t.vy,t.vy+=.02,t.life-=t.decay,t.twinkle+=.1,t.life>0)),t.spectralFlux&&t.spectralFlux>.8&&this.smoothedFlatness>.7&&Math.random()<.01&&this.regenerateGroveChaos()}regenerateGroveChaos(){const t=this.branches[0];t&&(this.branches=[t],t.children=[],this.growBranch(t,6,this.smoothedFlatness),this.generateLeaves())}onRender(){const t=this.ctx;t.fillStyle=this.config.backgroundColor,t.fillRect(0,0,this.width,this.height),t.save(),t.translate(this.centerX,this.centerY);const e=this.breathScale*this.zoomScale;t.scale(e,e);const s=.08*this.smoothedStereo;t.rotate(s),t.translate(-this.centerX,-this.centerY),this.drawCenterGlow(t),this.drawRoots(t),this.drawBranches(t),this.drawLeaves(t),this.drawPollen(t),t.restore()}drawCenterGlow(t){const e=100+150*this.smoothedRms,s=t.createRadialGradient(this.centerX,this.centerY,0,this.centerX,this.centerY,e),h=this.groveHue;s.addColorStop(0,`hsla(${h}, 70%, 50%, ${.15+.2*this.sapPulse})`),s.addColorStop(.5,`hsla(${h}, 60%, 40%, ${.08+.1*this.sapPulse})`),s.addColorStop(1,"hsla(0, 0%, 0%, 0)"),t.fillStyle=s,t.fillRect(this.centerX-e,this.centerY-e,2*e,2*e)}drawRoots(t){t.lineCap="round",t.lineJoin="round",this.roots.forEach(e=>{t.strokeStyle=`hsla(${this.groveHue-20}, 50%, 25%, 0.6)`,t.lineWidth=e.thickness,t.beginPath(),t.moveTo(e.x,e.y);const s=(e.x+e.endX)/2+15*Math.sin(e.wiggle),h=(e.y+e.endY)/2+15*Math.cos(e.wiggle);if(t.quadraticCurveTo(s,h,e.endX,e.endY),t.stroke(),this.smoothedBass>.4){const s=5+10*this.smoothedBass,h=t.createRadialGradient(e.endX,e.endY,0,e.endX,e.endY,s);h.addColorStop(0,`hsla(${this.groveHue}, 70%, 50%, ${this.smoothedBass})`),h.addColorStop(1,"hsla(0, 0%, 0%, 0)"),t.fillStyle=h,t.beginPath(),t.arc(e.endX,e.endY,s,0,2*Math.PI),t.fill()}})}drawBranches(t){t.lineCap="round",t.lineJoin="round",this.branches.forEach(e=>{const s=.4*this.sapPulse,h=30+30*s;t.strokeStyle=`hsla(${this.groveHue}, 50%, ${h}%, ${.7+s})`,t.lineWidth=e.thickness*(1+.3*this.smoothedRms),t.beginPath(),t.moveTo(e.x,e.y);const a=e.endX-e.x,i=e.endY-e.y,o=Math.sqrt(a*a+i*i),n=Math.sin(e.phaseOffset+this.sapPulse*Math.PI)*o*.08,r=-i/o,l=a/o,d=(e.x+e.endX)/2+r*n,c=(e.y+e.endY)/2+l*n;t.quadraticCurveTo(d,c,e.endX,e.endY),t.stroke(),this.sapPulse>.1&&(t.strokeStyle=`hsla(${this.groveHue+20}, 80%, 60%, ${.5*this.sapPulse})`,t.lineWidth=.4*e.thickness,t.stroke())})}drawLeaves(t){this.leaves.forEach(e=>{t.save(),t.translate(e.x,e.y),t.rotate(e.angle+e.rotation);const s=.5+.5*this.smoothedMid,h=this.groveHue+10;t.fillStyle=`hsla(${h}, 60%, 45%, ${e.alpha*s})`,t.beginPath(),t.ellipse(0,0,e.size,.6*e.size,0,0,2*Math.PI),t.fill(),t.strokeStyle=`hsla(${h}, 70%, 55%, ${e.alpha*s*.5})`,t.lineWidth=.5,t.stroke(),t.restore()})}drawPollen(t){this.pollenParticles.forEach(e=>{const s=e.life*(.6+.4*Math.sin(e.twinkle)),h=this.groveHue+60,a=e.size*(1+.3*Math.sin(2*e.twinkle));t.fillStyle=`hsla(${h}, 80%, 70%, ${s})`,t.beginPath(),t.arc(e.x,e.y,a,0,2*Math.PI),t.fill();const i=t.createRadialGradient(e.x,e.y,0,e.x,e.y,3*a);i.addColorStop(0,`hsla(${h}, 90%, 80%, ${.4*s})`),i.addColorStop(1,"hsla(0, 0%, 0%, 0)"),t.fillStyle=i,t.beginPath(),t.arc(e.x,e.y,3*a,0,2*Math.PI),t.fill()})}onResize(){this.centerX=this.width/2,this.centerY=this.height/2,this.branches=[],this.roots=[],this.leaves=[],this.initializeGrove()}}"undefined"!=typeof window&&(window.DreamingGroveVisualizer=DreamingGroveVisualizer);