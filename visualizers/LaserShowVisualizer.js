class LaserShowVisualizer extends BaseVisualizer{constructor(t){super(t),this.name="Laser Show",this.lasers=[],this.numLasers=8,this.maxBeamWidth=8,this.particles=[],this.maxParticles=200,this.lastBeatTime=0,this.beatThreshold=.7,this.rotationSpeed=0,this.targetRotationSpeed=0,this.scannerAngle=0,this.scannerBeams=[],this.strobeIntensity=0,this.initializeLasers(),this.initializeScanners()}initializeLasers(){const t=[[255,0,0],[0,255,255],[0,255,0],[255,0,255],[255,255,0],[138,43,226],[255,105,180],[0,191,255]];for(let e=0;e<this.numLasers;e++)this.lasers.push({angle:2*Math.PI*e/this.numLasers,targetAngle:2*Math.PI*e/this.numLasers,width:4,targetWidth:4,color:t[e%t.length],speed:.02+.03*Math.random(),phase:Math.random()*Math.PI*2,intensity:.5,targetIntensity:.5})}initializeScanners(){for(let t=0;t<4;t++)this.scannerBeams.push({angle:2*Math.PI*t/4,speed:.05+.05*Math.random(),width:2,length:.9,opacity:.3})}onUpdate(t){const{bassEnergy:e,midEnergy:a,trebleEnergy:s,isBeat:i,bassDrop:r,energy:n}=t,h=i&&n>this.beatThreshold,o=performance.now();h&&o-this.lastBeatTime>150&&(this.lastBeatTime=o,this.onBeat(t)),this.lasers.forEach((t,i)=>{const r=i%3==0?e:i%3==1?a:s;h?(t.targetAngle+=(Math.random()-.5)*Math.PI*.5*n,t.targetIntensity=.8+.2*n):t.targetIntensity=.3+.4*r,t.targetWidth=4+16*r,t.width+=.2*(t.targetWidth-t.width),t.angle+=.1*(t.targetAngle-t.angle),t.angle+=.01*Math.sin(.001*o+t.phase)*r,t.intensity+=.15*(t.targetIntensity-t.intensity)}),this.scannerBeams.forEach((t,e)=>{t.angle+=t.speed*(1+2*n),t.opacity=.2+.3*s}),this.targetRotationSpeed=.03*a,this.rotationSpeed+=.1*(this.targetRotationSpeed-this.rotationSpeed),this.scannerAngle+=this.rotationSpeed,this.updateParticles(),this.strobeIntensity*=.9}onBeat(t){const{energy:e,bassEnergy:a}=t;this.lasers.forEach(t=>{Math.random()>.3&&(t.targetAngle+=(Math.random()-.5)*Math.PI)}),this.createParticleBurst(e),e>.85&&(this.strobeIntensity=Math.min(1,this.strobeIntensity+.4))}createParticleBurst(t){const e=Math.floor(10+20*t);this.lasers.forEach(t=>{if(Math.random()>.5)for(let a=0;a<e/this.numLasers;a++)if(this.particles.length<this.maxParticles){const e=Math.max(this.width,this.height)/Math.min(this.width,this.height),a=Math.cos(t.angle)*e,s=Math.sin(t.angle)*e;this.particles.push({x:a,y:s,vx:.02*(Math.random()-.5),vy:.02*(Math.random()-.5),life:1,decay:.02+.02*Math.random(),size:1+3*Math.random(),color:t.color})}})}updateParticles(){for(let t=this.particles.length-1;t>=0;t--){const e=this.particles[t];e.x+=e.vx,e.y+=e.vy,e.life-=e.decay,e.life<=0&&this.particles.splice(t,1)}}onRender(){const t=this.ctx;if(!t)return;const{width:e,height:a}=this,s=e/2,i=a/2,r=Math.min(e,a);t.fillStyle="rgba(0, 0, 0, 0.15)",t.fillRect(0,0,e,a),t.save(),t.translate(s,i),t.rotate(this.scannerAngle),this.scannerBeams.forEach(e=>{const a=Math.cos(e.angle)*e.length*r*.5,s=Math.sin(e.angle)*e.length*r*.5;t.beginPath(),t.moveTo(0,0),t.lineTo(a,s),t.strokeStyle=`rgba(100, 150, 255, ${e.opacity})`,t.lineWidth=e.width,t.shadowBlur=15,t.shadowColor="rgba(100, 150, 255, 0.8)",t.stroke()}),t.restore(),t.save(),t.translate(s,i),this.lasers.forEach(s=>{const i=1.5*Math.max(e,a),r=Math.cos(s.angle)*i,n=Math.sin(s.angle)*i,[h,o,l]=s.color,c=s.intensity,d=.2*s.width,g=2.5*s.width,y=s.angle+Math.PI/2,p=Math.cos(y),m=Math.sin(y),b=0+p*d,f=0+m*d,M=0-p*d,w=0-m*d,$=r+p*g,u=n+m*g,S=r-p*g,P=n-m*g;t.save(),t.globalAlpha=.3*c,t.shadowBlur=40,t.shadowColor=`rgba(${h}, ${o}, ${l}, 0.8)`;const I=t.createLinearGradient(0,0,r,n);I.addColorStop(0,`rgba(${h}, ${o}, ${l}, 0.8)`),I.addColorStop(1,`rgba(${h}, ${o}, ${l}, 0.3)`),t.fillStyle=I,t.beginPath(),t.moveTo(b+p*g*1.5,f+m*g*1.5),t.lineTo(M-p*g*1.5,w-m*g*1.5),t.lineTo(S-p*g*.5,P-m*g*.5),t.lineTo($+p*g*.5,u+m*g*.5),t.closePath(),t.fill(),t.restore(),t.save(),t.globalAlpha=c,t.shadowBlur=25,t.shadowColor=`rgba(${h}, ${o}, ${l}, 1)`;const B=t.createLinearGradient(0,0,r,n);B.addColorStop(0,`rgba(${h}, ${o}, ${l}, 1)`),B.addColorStop(1,`rgba(${h}, ${o}, ${l}, 0.6)`),t.fillStyle=B,t.beginPath(),t.moveTo(b,f),t.lineTo(M,w),t.lineTo(S,P),t.lineTo($,u),t.closePath(),t.fill(),t.restore()}),this.particles.forEach(e=>{const a=e.x*r*.5,s=e.y*r*.5,[i,n,h]=e.color;t.beginPath(),t.arc(a,s,e.size,0,2*Math.PI),t.fillStyle=`rgba(${i}, ${n}, ${h}, ${.8*e.life})`,t.shadowBlur=8,t.shadowColor=`rgba(${i}, ${n}, ${h}, ${e.life})`,t.fill()});const n=10+20*this.strobeIntensity;t.beginPath(),t.arc(0,0,n,0,2*Math.PI),t.fillStyle=`rgba(255, 255, 255, ${.8+.2*this.strobeIntensity})`,t.shadowBlur=30,t.shadowColor="rgba(255, 255, 255, 1)",t.fill(),t.restore(),this.strobeIntensity>.1&&(t.fillStyle=`rgba(255, 255, 255, ${.15*this.strobeIntensity})`,t.fillRect(0,0,e,a))}}"undefined"!=typeof window&&(window.LaserShowVisualizer=LaserShowVisualizer);