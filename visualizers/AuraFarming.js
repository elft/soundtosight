class AuraFarmingVisualizer extends BaseVisualizer{constructor(t=null,e={}){super(t,{debug:!1,stereoMode:!0,...e})}async init(){this.centerX=0,this.centerY=0,this.updateDimensions(),this.threads={low:[],mid:[],high:[],stereo:[]},this.threadHistoryLength=36,this.threadAngles=[],this.spirals={left:{particles:[],rotation:0,direction:1,color:"#00d9ff"},right:{particles:[],rotation:0,direction:-1,color:"#ff00ff"}},this.rings=[],this.dust=[],this.dustMaxCount=200,this.explosions=[],this.explosionMaxCount=500,this.stereoVeils={left:{points:[],hue:180},right:{points:[],hue:315},maxPoints:60},this.coreShape={rotation:0,twist:0,pulse:0,petals:8},this.harmonicRibbons=[],this.audioCache={lowEnergy:0,midEnergy:0,highEnergy:0,leftEnergy:0,rightEnergy:0,overallEnergy:0,spectralFlux:0,spectralCentroid:0,spectralFlatness:0,activeBandRatio:0,stereoBalance:0,stereoSpread:0,stereoContrast:0,onsetDetected:!1,enhancedBassDropDetected:!1,enhancedBassDropIntensity:0,massiveEnergyChangeDetected:!1,energyChangeIntensity:0,lastTotalEnergy:0},this.time=0,this.phase=0,this.auraMovement={left:{baseX:-80,baseY:20,orbitRadius:50,orbitSpeed:.02,floatSpeed:.015,angle:0},right:{baseX:80,baseY:20,orbitRadius:50,orbitSpeed:-.018,floatSpeed:.012,angle:Math.PI}},this.smoothedLow=0,this.smoothedMid=0,this.smoothedHigh=0,this.smoothedFlux=0,this.smoothedSub=0,this.smoothedPresence=0,this.smoothedBrilliance=0,this.smoothedBalance=0,this.smoothedSpread=0}updateDimensions(){this.centerX=this.width/2,this.centerY=this.height/2,this.figure||(this.figure={headRadius:0,bodyLength:0,shoulderWidth:0,legSpacing:0,seated:!0})}onResize(){this.updateDimensions()}onUpdate(t){if(!t)return;const e=t.aWeighted?.left?.normalized??0,i=t.aWeighted?.right?.normalized??0,s=t.aWeighted?.mono?.normalized??0;this.audioCache.leftEnergy=e,this.audioCache.rightEnergy=i,this.audioCache.overallEnergy=s;const h=t.subBassEnergy??0,a=t.bassEnergy??t.BassEnergy??0,o=t.BassEnergy??t.bassEnergy??0,r=t.lowMidEnergy??0,n=t.midEnergy??0,l=t.upperMidEnergy??0,d=t.presenceEnergy??t.PresenceEnergy??0,c=t.trebleEnergy??0,p=t.brillianceEnergy??0,g=t.ultrassonicEnergy??0,m=(a+o+h)/3,u=(n+r)/2,f=(l+d+c+p+g)/5;this.smoothedLow=.78*this.smoothedLow+.22*m,this.smoothedSub=.82*this.smoothedSub+(h+o)/2*.18,this.smoothedMid=.8*this.smoothedMid+.2*u,this.smoothedHigh=.78*this.smoothedHigh+.22*f,this.smoothedPresence=.82*this.smoothedPresence+(d+l)/2*.18,this.smoothedBrilliance=.82*this.smoothedBrilliance+(c+p+g)/3*.18,this.audioCache.onsetDetected=t.isBeat??!1,this.audioCache.enhancedBassDropDetected=t.bassDrop??!1,this.audioCache.enhancedBassDropIntensity=t.bassDropIntensity??0,this.audioCache.massiveEnergyChangeDetected=t.isMassiveEnergyChange??!1,this.audioCache.energyChangeIntensity=t.energyChangeIntensity??0,this.audioCache.massiveEnergyChangeDetected&&(this.triggerExplosion("left",this.audioCache.energyChangeIntensity),this.triggerExplosion("right",this.audioCache.energyChangeIntensity)),this.smoothedFlux=.9*this.smoothedFlux+.1*(t.spectralFlux??0),this.audioCache.spectralCentroid=t.spectralCentroidNormalized??0,this.audioCache.spectralFlatness=t.spectralFlatnessSmoothed??0,this.audioCache.activeBandRatio=t.activeBandRatio??0,this.audioCache.stereoBalance=t.stereoBalance??0,this.audioCache.rmsDifference=t.rmsDifference??0,this.audioCache.stereoSpread=t.stereoSpread??0,this.audioCache.stereoContrast=Math.abs(e-i),this.smoothedBalance=.85*this.smoothedBalance+.15*this.audioCache.stereoBalance,this.smoothedSpread=.85*this.smoothedSpread+.15*this.audioCache.stereoSpread,this.updateThreads(),this.updateAuraMovement(),this.updateSpiritals(),this.updateRings(),this.updateStereoVeils(),this.updateHarmonicRibbons(),this.updateCoreShape(),this.updateDust(),this.updateExplosions(),this.time=t.time??this.time+1,this.phase=this.time*Math.PI/180%(2*Math.PI)}updateAuraMovement(){for(let t of["left","right"]){const e=this.auraMovement[t];e.angle+=e.orbitSpeed;const i=this.smoothedLow+this.smoothedMid+this.smoothedHigh,s=isFinite(i)?30*i:0,h=e.orbitRadius+s,a=isFinite(this.time)?this.time:0,o=20*Math.sin(a*e.floatSpeed),r=15*Math.cos(a*e.floatSpeed*.7),n=Math.cos(e.angle)*h,l=Math.sin(e.angle)*h*.6;e.currentX=isFinite(e.baseX+n+o)?e.baseX+n+o:e.baseX,e.currentY=isFinite(e.baseY+l+r)?e.baseY+l+r:e.baseY}}updateThreads(){const t=14,e=.45*Math.max(this.width,this.height);if(this.threads.low.length!==t){this.threads.low=[],this.threads.mid=[],this.threads.high=[],this.threads.stereo=[];for(let e=0;e<t;e++)this.threads.low.push([]),this.threads.mid.push([]),this.threads.high.push([]),this.threads.stereo.push([])}this.threadAngles.length!==t&&(this.threadAngles=Array.from({length:t},(e,i)=>i/t*Math.PI*2));const i=this.audioCache.spectralCentroid,s=isFinite(this.smoothedFlux)?this.smoothedFlux:0,h=isFinite(this.smoothedSpread)?this.smoothedSpread:0,a=isFinite(this.smoothedBalance)?this.smoothedBalance:0,o=this.audioCache.stereoContrast??0,r=this.smoothedLow,n=this.smoothedSub,l=this.smoothedMid,d=this.smoothedPresence,c=this.smoothedHigh,p=this.smoothedBrilliance;for(let g=0;g<t;g++){const t=this.threadAngles[g],m=Math.sin(.01*(this.time+20*g))*s*.6,u=t+this.phase*(.18+.25*i)+m,f=e*(.18+.6*r+.4*n),M=u+.2*Math.sin(.005*this.time+g)*(1+s),x=this.centerX+Math.cos(M)*f,y=this.centerY+Math.sin(M)*(f*(.8+.3*n));this.pushThreadPoint(this.threads.low[g],{x:isFinite(x)?x:this.centerX,y:isFinite(y)?y:this.centerY,alpha:.3+.5*r,width:2+4*r});const C=e*(.35+.4*l+.2*d),b=u+.4*this.phase+.4*s,S=this.centerX+Math.cos(b)*C,w=this.centerY+Math.sin(b)*(C*(.9+.2*d));this.pushThreadPoint(this.threads.mid[g],{x:isFinite(S)?S:this.centerX,y:isFinite(w)?w:this.centerY,alpha:.15+.45*l,width:1.5+3*l});const $=e*(.55+.3*c+.4*p),P=u+.7*this.phase+.6*s,v=this.centerX+Math.cos(P)*$,F=this.centerY+Math.sin(P)*($*(.85+.2*s));this.pushThreadPoint(this.threads.high[g],{x:isFinite(v)?v:this.centerX,y:isFinite(F)?F:this.centerY,alpha:.12+.4*c+.3*p,width:1+2*c});const I=e*(.25+.5*h+.3*o),B=t+a*Math.PI*.35,E=this.centerX+Math.cos(B)*I,R=this.centerY+Math.sin(B)*I*(.7+.4*h);this.pushThreadPoint(this.threads.stereo[g],{x:isFinite(E)?E:this.centerX,y:isFinite(R)?R:this.centerY,alpha:.18+.5*o,width:1.2+2.5*h});let X=t+.002+.01*s+.008*c;X%=2*Math.PI,X<0&&(X+=2*Math.PI),this.threadAngles[g]=X}}pushThreadPoint(t,e){t.push(e),t.length>this.threadHistoryLength&&t.shift()}updateSpiritals(){const t=this.audioCache.leftEnergy,e=this.audioCache.rightEnergy;this.spirals.left.rotation+=.15*t,this.spirals.right.rotation-=.15*e,this.updateSpiralParticles(this.spirals.left,t),this.updateSpiralParticles(this.spirals.right,e)}updateSpiralParticles(t,e){const i=Math.floor(100*e)+12,s=Math.max(this.width,this.height),h=.8*s,a=.05*s;for(;t.particles.length<i;)t.particles.push({angle:Math.random()*Math.PI*2,distance:a+Math.random()*(h-a),age:0,lifetime:60});for(;t.particles.length>i;)t.particles.pop();for(let i of t.particles)i.age++,i.angle+=t.direction*e*.08,i.distance+=2*e,i.age>i.lifetime&&(i.age=0,i.distance=a+Math.random()*(h-a),i.angle=Math.random()*Math.PI*2)}updateRings(){const t=this.smoothedLow,e=this.smoothedPresence,i=this.smoothedBrilliance,s=this.audioCache.spectralCentroid??0;if(this.audioCache.enhancedBassDropDetected||this.audioCache.onsetDetected&&t>.45){const e=Math.min(1,this.audioCache.enhancedBassDropIntensity||t),i=Math.max(this.width,this.height)*(.55+.45*e);this.rings.push({radius:0,maxRadius:isFinite(i)?i:0,age:0,lifetime:36+28*e,hue:30+20*e,alpha:.45+.35*e,lineWidth:3+6*e,glow:.5+.4*e})}if(this.audioCache.onsetDetected&&e>.35){const t=Math.min(1,e+.5*i),h=Math.max(this.width,this.height)*(.4+.35*t);this.rings.push({radius:0,maxRadius:isFinite(h)?h:0,age:0,lifetime:50,hue:160+120*s,alpha:.25+.3*t,lineWidth:1.5+4*t,glow:.2+.4*t})}for(let t=this.rings.length-1;t>=0;t--){const e=this.rings[t];e.age++;const i=e.lifetime?e.age/e.lifetime:1;e.radius=e.maxRadius*Math.min(1,i),e.age>e.lifetime&&this.rings.splice(t,1)}}updateStereoVeils(){const{left:t,right:e,maxPoints:i}=this.stereoVeils,s=Math.max(0,this.smoothedSpread),h=this.smoothedBalance,a=Math.min(1,this.audioCache.stereoContrast??0),o=Math.min(1,1.2*(this.audioCache.overallEnergy??0)),r=Math.max(0,Math.floor(4*(s+a+o))),n=(t,e)=>{for(let n=0;n<r&&!(t.points.length>=i);n++){const i=.18*this.width+s*this.width*.15,r=this.centerX+e*(i+h*this.width*.08),n=this.centerY+(Math.random()-.5)*this.height*(.8+.4*s);t.points.push({x:isFinite(r)?r:this.centerX,y:isFinite(n)?n:this.centerY,vx:e*(.6+3*a+2*s),vy:(Math.random()-.5)*(2+4*s),age:0,lifetime:110+40*Math.random(),alpha:.15+.3*a+.3*o,size:30+120*Math.random(),wobble:Math.random()*Math.PI*2})}};n(t,-1),n(e,1);const l=t=>{for(let e=t.points.length-1;e>=0;e--){const i=t.points[e];i.age++,i.x+=i.vx,i.y+=i.vy,i.vx*=.99,i.vy*=.99,i.y+=.6*Math.sin(.02*this.time+i.wobble),i.age>i.lifetime&&t.points.splice(e,1)}};l(t),l(e)}updateHarmonicRibbons(){if(5!==this.harmonicRibbons.length){this.harmonicRibbons=[];for(let t=0;t<5;t++)this.harmonicRibbons.push({baseRatio:.18+.1*t,rotation:Math.random()*Math.PI*2,seed:500*Math.random(),thickness:4,opacity:.2,hueShift:60*Math.random()})}const t=.3*Math.min(this.width,this.height),e=.5*this.smoothedMid+.35*this.smoothedPresence,i=this.smoothedBrilliance,s=this.audioCache.spectralCentroid??0;for(let h of this.harmonicRibbons){h.rotation+=.01+.05*e+.04*s;const a=Math.sin(.01*(this.time+h.seed))*(.2+.6*this.audioCache.spectralFlatness);h.radius=t*(.8+h.baseRatio+.2*a)+120*this.smoothedLow,h.thickness=6+20*e+10*i,h.opacity=.12+.3*e+.25*i,h.waveOffset=a}}updateCoreShape(){const t=this.audioCache.overallEnergy??0,e=this.smoothedFlux,i=this.smoothedBrilliance,s=this.smoothedHigh,h=this.smoothedPresence,a=this.audioCache.spectralCentroid??0,o=this.audioCache.activeBandRatio??0;this.coreShape.rotation+=.01+.12*t+.08*a,this.coreShape.twist=.2+.6*e+.4*i,this.coreShape.pulse=.3+.4*t+.35*s+.25*h;const r=6+Math.floor(6*o+4*i);this.coreShape.petals=Math.max(5,Math.min(12,r))}updateDust(){const t=this.smoothedHigh,e=Math.floor(5*t),i=1.2*Math.sqrt(Math.pow(this.width/2,2)+Math.pow(this.height/2,2));for(let t=0;t<e;t++)if(this.dust.length<this.dustMaxCount){const t=Math.random()*Math.PI*2,e=Math.random()*i;this.dust.push({x:this.centerX+Math.cos(t)*e,y:this.centerY+Math.sin(t)*e,vx:2*(Math.random()-.5),vy:2*(Math.random()-.5),age:0,lifetime:100,brightness:.7*Math.random()+.3})}for(let t=this.dust.length-1;t>=0;t--){const e=this.dust[t];e.age++,e.x+=e.vx,e.y+=e.vy,e.vx*=.98,e.vy*=.98,e.age>e.lifetime&&this.dust.splice(t,1)}}triggerExplosion(t,e){const i=this.auraMovement[t],s=this.centerX+i.currentX,h=this.centerY+i.currentY,a="left"===t?"#00d9ff":"#ff00ff",o=Math.floor(100*e)+30;for(let t=0;t<o&&this.explosions.length<this.explosionMaxCount;t++){const t=Math.random()*Math.PI*2,i=(5+15*Math.random())*e;this.explosions.push({x:s,y:h,vx:Math.cos(t)*i,vy:Math.sin(t)*i,age:0,lifetime:60+40*Math.random(),size:2+4*Math.random(),color:a,brightness:.8+.2*Math.random(),decay:.98-.02*Math.random()})}}updateExplosions(){for(let t=this.explosions.length-1;t>=0;t--){const e=this.explosions[t];e.age++,e.x+=e.vx,e.y+=e.vy,e.vx*=e.decay,e.vy*=e.decay,e.vy+=.1,e.age>e.lifetime&&this.explosions.splice(t,1)}}onRender(){this.ctx&&(this.ctx.fillStyle=this.config.backgroundColor||"#000",this.ctx.fillRect(0,0,this.width,this.height)),this.drawConcentriCRings(),this.drawStereoVeils(),this.drawHarmonicRibbons(),this.drawThreads(),this.drawCoreMandala(),this.drawSpiralArms(),this.drawCosmicDust(),this.drawExplosions()}drawConcentriCRings(){if(!this.ctx||0===this.rings.length)return;const t=this.ctx;t.save(),t.lineCap="round",t.globalCompositeOperation="screen";for(let e of this.rings){const i=e.lifetime?e.age/e.lifetime:0,s=Math.max(0,1-i),h=e.alpha*s,a=Math.max(0,e.radius);if(h<=0||a<=0)continue;const o=t.createRadialGradient(this.centerX,this.centerY,Math.max(0,a-2*e.lineWidth),this.centerX,this.centerY,a+2*e.lineWidth),r=isFinite(e.hue)?e.hue:30;o.addColorStop(0,`hsla(${r}, 90%, 65%, ${.4*h})`),o.addColorStop(1,`hsla(${r}, 90%, 50%, 0)`),t.strokeStyle=`hsla(${r}, 95%, 60%, ${h})`,t.lineWidth=e.lineWidth,t.shadowBlur=35*e.glow,t.shadowColor=`hsla(${r}, 100%, 65%, ${.7*h})`,t.beginPath(),t.arc(this.centerX,this.centerY,a,0,2*Math.PI),t.stroke(),t.beginPath(),t.strokeStyle=o,t.lineWidth=.6*e.lineWidth,t.arc(this.centerX,this.centerY,a+.3*e.lineWidth,0,2*Math.PI),t.stroke()}t.restore()}drawThreads(){if(!this.ctx)return;const t=this.ctx;if(!this.threads.low.length)return;const e=(e,i,s=0)=>{for(let h of e){if(!h||h.length<2)continue;const e=h[0],a=i({first:e,last:h[h.length-1],history:h});if(a){t.beginPath(),t.moveTo(e.x,e.y);for(let e=1;e<h.length;e++){const i=h[e-1],s=h[e],a=.5*(i.x+s.x),o=.5*(i.y+s.y);t.quadraticCurveTo(i.x,i.y,a,o)}t.lineWidth=a.lineWidth,t.strokeStyle=a.strokeStyle,t.globalAlpha=a.alpha,t.shadowBlur=s*a.lineWidth,t.shadowColor=a.shadowColor||a.strokeStyle,t.stroke()}}};t.save(),t.globalCompositeOperation="lighter",t.lineCap="round",t.lineJoin="round";const i=20+40*this.smoothedSub,s=130+40*this.smoothedPresence,h=220+40*this.smoothedBrilliance,a=280+60*this.smoothedBalance;e(this.threads.low,({first:e,last:s})=>{const h=Math.min(1,s.alpha??.4),a=t.createLinearGradient(e.x,e.y,s.x,s.y);return a.addColorStop(0,`hsla(${i}, 95%, 40%, ${.3*h})`),a.addColorStop(1,`hsla(${i+10}, 95%, 55%, ${h})`),{strokeStyle:a,lineWidth:Math.max(1.5,s.width??2),alpha:1,shadowColor:`hsla(${i}, 100%, 60%, ${.6*h})`}},6),e(this.threads.mid,({first:e,last:i})=>{const h=Math.min(1,i.alpha??.4),a=t.createLinearGradient(e.x,e.y,i.x,i.y);return a.addColorStop(0,`hsla(${s}, 85%, 40%, ${.25*h})`),a.addColorStop(1,`hsla(${s+20}, 85%, 55%, ${h})`),{strokeStyle:a,lineWidth:Math.max(1.2,i.width??1.5),alpha:.9,shadowColor:`hsla(${s}, 90%, 65%, ${.5*h})`}},4),e(this.threads.high,({first:e,last:i})=>{const s=Math.min(1,i.alpha??.3),a=t.createLinearGradient(e.x,e.y,i.x,i.y);return a.addColorStop(0,`hsla(${h}, 90%, 65%, ${.3*s})`),a.addColorStop(1,`hsla(${h+40}, 90%, 75%, ${s})`),{strokeStyle:a,lineWidth:Math.max(1,i.width??1.2),alpha:.85,shadowColor:`hsla(${h}, 95%, 75%, ${.7*s})`}},8),e(this.threads.stereo,({history:e,last:i})=>{const s=Math.min(1,i.alpha??.2),h=t.createLinearGradient(e[0].x,e[0].y,i.x,i.y);return h.addColorStop(0,`hsla(${a}, 70%, 45%, ${.2*s})`),h.addColorStop(1,`hsla(${a+40}, 70%, 65%, ${s})`),{strokeStyle:h,lineWidth:Math.max(1,i.width??1.4),alpha:.75,shadowColor:`hsla(${a+20}, 80%, 65%, ${.5*s})`}},5),t.restore()}drawStereoVeils(){if(!this.ctx)return;const t=this.ctx,e=e=>{for(let i of e.points){const s=i.lifetime?i.age/i.lifetime:0,h=Math.max(0,1-s),a=i.alpha*h;if(a<=0)continue;const o=i.size*(.6+.4*this.smoothedSpread),r=t.createRadialGradient(i.x,i.y,0,i.x,i.y,o);r.addColorStop(0,`hsla(${e.hue}, 80%, 65%, ${a})`),r.addColorStop(1,`hsla(${e.hue}, 80%, 65%, 0)`),t.globalAlpha=1,t.fillStyle=r,t.beginPath(),t.arc(i.x,i.y,o,0,2*Math.PI),t.fill()}};t.save(),t.globalCompositeOperation="screen",e(this.stereoVeils.left),e(this.stereoVeils.right),t.restore()}drawHarmonicRibbons(){if(!this.ctx||!this.harmonicRibbons.length)return;const t=this.ctx,e=this.audioCache.spectralCentroid??0;t.save(),t.translate(this.centerX,this.centerY),t.globalCompositeOperation="lighter";for(let i of this.harmonicRibbons){const s=Math.max(20,i.radius??0),h=Math.min(1,i.opacity??.4),a=150+i.hueShift+80*e,o=t.createLinearGradient(-s,0,s,0);o.addColorStop(0,`hsla(${a}, 80%, 55%, ${.3*h})`),o.addColorStop(.5,`hsla(${a+20}, 80%, 60%, ${h})`),o.addColorStop(1,`hsla(${a-15}, 80%, 55%, ${.3*h})`),t.save(),t.rotate(i.rotation),t.lineWidth=i.thickness,t.strokeStyle=o,t.globalAlpha=1,t.shadowBlur=1.5*i.thickness,t.shadowColor=`hsla(${a}, 90%, 65%, ${h})`,t.beginPath(),t.ellipse(0,0,s,s*(.5+.45*(i.waveOffset??0)+.2*this.smoothedBalance),0,0,2*Math.PI),t.stroke(),t.restore()}t.restore()}drawCoreMandala(){if(!this.ctx)return;const t=this.ctx,e=this.coreShape.petals??6,i=Math.min(1.6,Math.max(.1,this.coreShape.twist??.2)),s=Math.max(.2,this.coreShape.pulse??.3),h=.12*Math.min(this.width,this.height)*s,a=.45*h,o=h*(1.2+.8*this.smoothedHigh),r=190+100*(this.audioCache.spectralCentroid??0),n=this.smoothedBrilliance;t.save(),t.translate(this.centerX,this.centerY),t.rotate(this.coreShape.rotation);const l=t.createRadialGradient(0,0,.5*a,0,0,o);l.addColorStop(0,`hsla(${r}, 90%, 85%, ${.35+.4*n})`),l.addColorStop(.6,`hsla(${r+40}, 90%, 65%, ${.55+.3*n})`),l.addColorStop(1,`hsla(${r-20}, 90%, 45%, 0.2)`),t.beginPath();for(let s=0;s<e;s++){const h=s*(2*Math.PI/e),a=Math.sin(.015*this.time+s)*i*.4,r=Math.cos(h+a)*o,n=Math.sin(h+a)*o;0===s?t.moveTo(r,n):t.lineTo(r,n)}t.closePath(),t.fillStyle=l,t.fill(),t.globalCompositeOperation="lighter",t.beginPath();for(let s=0;s<e;s++){const h=s*(2*Math.PI/e),o=Math.cos(.02*this.time+1.2*s)*i*.3,r=Math.cos(h+o)*a,n=Math.sin(h+o)*a;0===s?t.moveTo(r,n):t.lineTo(r,n)}t.closePath(),t.strokeStyle=`hsla(${r+60}, 85%, 70%, ${.4+.4*n})`,t.lineWidth=2+2*this.smoothedPresence,t.stroke(),t.beginPath(),t.arc(0,0,.4*a,0,2*Math.PI),t.fillStyle=`hsla(${r+80}, 95%, 75%, ${.5+.3*n})`,t.fill(),t.restore()}drawSpiralArms(){this.drawSpiral(this.spirals.left,this.auraMovement.left.currentX,this.auraMovement.left.currentY),this.drawSpiral(this.spirals.right,this.auraMovement.right.currentX,this.auraMovement.right.currentY)}drawSpiral(t,e,i){const s=this.centerX+(isFinite(e)?e:0),h=this.centerY+(isFinite(i)?i:0);let a=50;if(t.particles.length>0){const e=t.particles.map(t=>isFinite(t.distance)?t.distance:0);a=e.reduce((t,e)=>t+e,0)/e.length}let o=a+20;o=Math.min(Math.max(o,40),150);const r=.25+.25*(isFinite(this.smoothedPresence)?this.smoothedPresence:0)+.25*(isFinite(this.smoothedHigh)?this.smoothedHigh:0),n=this.ctx.createRadialGradient(s,h,0,s,h,o);1===t.direction?(n.addColorStop(0,`rgba(0,220,255,${r})`),n.addColorStop(1,"rgba(0,220,255,0)")):(n.addColorStop(0,`rgba(255,0,220,${r})`),n.addColorStop(1,"rgba(255,0,220,0)")),this.ctx.save(),this.ctx.globalCompositeOperation="lighter",this.ctx.fillStyle=n,this.ctx.beginPath(),this.ctx.arc(s,h,o,0,2*Math.PI),this.ctx.fill();const l=t.color.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i);let d={r:0,g:200,b:255};l&&(d={r:parseInt(l[1],16),g:parseInt(l[2],16),b:parseInt(l[3],16)});for(let e of t.particles){const t=isFinite(e.angle)?e.angle:0,i=isFinite(e.distance)?e.distance:0,a=s+Math.cos(t)*i,o=h+Math.sin(t)*i,r=1-e.age/e.lifetime,n=(2+i/50)*(1+.5*(isFinite(this.smoothedHigh)?this.smoothedHigh:0));this.ctx.fillStyle=`rgba(${d.r}, ${d.g}, ${d.b}, ${r})`,this.ctx.beginPath(),this.ctx.arc(a,o,n,0,2*Math.PI),this.ctx.fill()}this.ctx.restore()}drawCosmicDust(){for(let t of this.dust){const e=1-t.age/t.lifetime,i=t.brightness,s=.5*Math.sin(.1*this.time+t.age)+.5;this.ctx.fillStyle=`rgba(150, 220, 255, ${e*i*s})`,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,1+2*s,0,2*Math.PI),this.ctx.fill(),this.ctx.fillStyle=`rgba(200, 255, 255, ${e*i*s*.5})`,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,3+5*s,0,2*Math.PI),this.ctx.fill()}}drawExplosions(){for(let t of this.explosions){const e=1-t.age/t.lifetime,i=t.brightness,s=1-t.age/t.lifetime*.5,h=t.size*s,a=t.color.match(/#(\w{2})(\w{2})(\w{2})/);if(a){const s=parseInt(a[1],16),o=parseInt(a[2],16),r=parseInt(a[3],16);if(this.ctx.fillStyle=`rgba(${s}, ${o}, ${r}, ${e*i})`,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,h,0,2*Math.PI),this.ctx.fill(),this.ctx.fillStyle=`rgba(${s}, ${o}, ${r}, ${e*i*.3})`,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,2*h,0,2*Math.PI),this.ctx.fill(),Math.sqrt(t.vx*t.vx+t.vy*t.vy)>3){const a=t.x-.5*t.vx,n=t.y-.5*t.vy;this.ctx.strokeStyle=`rgba(${s}, ${o}, ${r}, ${e*i*.4})`,this.ctx.lineWidth=.5*h,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(a,n),this.ctx.lineTo(t.x,t.y),this.ctx.stroke()}}}}destroy(){super.destroy()}}"undefined"!=typeof window&&(window.AuraFarmingVisualizer=AuraFarmingVisualizer);